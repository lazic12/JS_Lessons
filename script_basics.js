'use strict';

var letsPractice = 5;
var hereName = "Fedor";
let Boom = 5;
const pi = 3.14;

// var newObj = {
//     name: "Vasya",
//     surname: "Pupkin",
//     Age: 35,
//     Status: "married"
// }
// console.log(newObj["Age"]);

// // let arr =[ 'notch', 'gotch', 'dotch']
// // console.log(arr[0]);

// // alert('Hello World!');
// // let jim = confirm("are you here?");
// // console.log(jim); 
// let jim = prompt("are you here?", "Yes");
// console.log(jim); 

// var money = prompt("Ваш бюджет на месяц", '100');
// var time = prompt("Введите дату в формате YYYY-MM-DD", '2019-09-10');

// let appData = {
//     budget: money,
//     timeData: time,
//     expenses: {
//         question1: prompt("Введите обязательную статью расходов в этом месяце", "на кофе" )*2,
//         question2: prompt("Во сколько обойдется?", "5")*2
//     },
//     optionalExpenses: {
//     },
//     income: [],
//     savings: false
// };

// console.log(appData.expenses);

// let dailyBudget = money/30;
// alert('Your daily budget is ' + dailyBudget);
//Дан массив с элементами 1, 2, 3, 4, 5. С помощью цикла for найдите сумму квадратов элементов этого массива.

// let result = 0;
// let arr = [1, 2, 3, 4, 5];

// for (let i = 0; i < arr.length; i++) {
//     result += (arr[i]) ** 2;
//     console.log(result);
// }

//Дан массив с элементами 2, 5, 9, 15, 1, 4. С помощью цикла for и оператора if выведите в консоль те элементы массива, которые больше 3-х, но меньше 10.
// 
// let arr = [2, 5, 9, 15, 1, ];
// for (let i = 0; i < arr.length; i++) {
//     if (3 < arr[i] && arr[i] < 10) {
//         console.log(arr[i]);
//     }
// }

//Дан массив с числами. Числа могут быть положительными и отрицательными. Найдите сумму положительных элементов массива.
// let result = 0
// let arr = [-1, 1, -5, -6, 7, 9];
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i] > 0) {
//         result += (arr[i]);
//         console.log(result)
//     }
// }
//Дан массив числами, например: [10, 20, 30, 50, 235, 3000]. Выведите на экран только те числа из массива, которые начинаются на цифру 1, 2 или 5.
// let result = 0;
// let arr = ['10', '20', '30', '50', '235', '3000'];

// for (let i = 0; i < arr.length; i++) {
//     if (arr[i][0] === '1' || arr[i][0] === '2' || arr[i][0] === '5') {
//         console.log(arr[i]);
//     }

// }

// let arr = [1, 2, 3, 4, 5];
// for (let k = 0; k <= arr.length; k++) {

//     console.log(arr[arr.length - k])
// }

// let arr = ['a', 'b', 'c', 'd', 'e']
// for (let elem of arr) {
//     console.log(elem);
// }
//Дан массив с элементами 1, 2, 3, 4, 5. С помощью цикла for-of найдите сумму элементов этого массива.
// let result = 0;
// let arr = [1, 2, 3, 4, 5, 6];
// for (let elem of arr) {
//     result += elem;

// }
// console.log(result);

//Пусть у вас есть массив с названиями месяцев. С помощью цикла выведите на экран все месяцы из массива. Определите, каким циклом удобнее будет решить эту задачу: циклом for-of или обычным for со счетчиком.
// let arr = ['january', 'february', 'march'];
// for (let elem of arr) {
//     console.log(elem);
// }

//С помощью цикла for-in найдите сумму элементов этого объекта.
// let obj = {
//     a: 1,
//     b: 2,
//     c: 3,
//     d: 4,
//     e: 5
// };
// let result = 0;

// for (let key in obj) {
//     result += obj[key];

// }
// console.log(result);

//Инструкция break в JavaScript
//Дан массив с числами. Запустите цикл, который будет по очереди выводить элементы этого массива в консоль до тех пор, пока не встретится элемент со значением 0. После этого цикл должен завершить свою работу

// let arr = [4, 5, 7, 0, 9];
// for (let elem of arr) {
//     console.log(elem);
//     if (elem == 0) {
//         break;
//     }

// }
//Дан массив с числами. Найдите сумму элементов, расположенных от начала массива до первого отрицательного числа.

// let arr = [3, 5, 6, -2, 4];
// let result = 0;
// for (let i = 0; i <= arr.length; i++) {

//     if (arr[i] < 0) {
//         break;
//     }
//     result += arr[i];
// }
// console.log(result)

//Дан массив с числами. Найдите позицию первого числа 3 в этом массиве (считаем, что это число обязательно есть в массиве)
// let arr = [6, 5, 3, -2, 4];
// for (let i = 0; i <= arr.length; i++) {
//     if (arr[i] == 3) {
//         break;
//     }
//     console.log(i);

// }
// Определите, сколько целых чисел, начиная с числа 1, нужно сложить, чтобы сумма получилась больше 100.

// let res = 0;
// for (let i = 1; i < 101; i++) {
//     res += i;
//     if (res > 100) {
//         alert(i);
//         break;
//     }
// }


// let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];

// for (let elem of arr) {
//     let result;

//     if (elem % 2 == 0) {
//         result = elem * elem;
//     } else if (elem % 3 == 0) {
//         result = elem * elem * elem;
//     } else {
//         continue;
//     }

//     console.log(result); // вынесли вывод за условие
// }

// Работа с флагами в JavaScript
// Дан массив с элементами 'a', 'b', 'c', 'd', 'e'. Проверьте, что в этом массиве есть элемент 'c'. Если есть - выведите 'да', а если нет - выведите 'нет'.

// let arr = ['a', 'b', '5', 'd', 'e'];
// let flag = false;
// for (let elem of arr) {
//     if (elem == 'c') {
//         flag = true;
//         break;
//     }
// }
// if (flag === true) {
//     console.log('est');
// } else {
//     console.log('net');
// }
// Давайте напишем код, который будет проверять число на то, простое оно или нет. Простое число - это число, которое не делится ни на одно другое число (кроме как на 1 и на само себя - на это делятся все числа).
// let num = 51;
// let flag = true;
// for (let i = 2; i < num; i++) {
//     if (num % i == 0) {
//         flag = false;
//         break;
//     }
// }
// console.log(flag);

// Дано число num с неким начальным значением. Умножайте его на 3 столько раз, пока результат деления не станет больше 1000. Какое число получится? Посчитайте количество итераций, необходимых для этого.

// for (let num = 2, i = 0; num < 1000; num = num * 3, i++) {
//     console.log(num, i);
// }

//Формирование строк через циклы в JavaScript

//С помощью цикла сформируйте строку, заполненную 5-тью нулями.
// let x = '';
// for (let i = 0; i < 5; i++) {
//     x += '0';
// }
// console.log(x);

// С помощью цикла сформируйте строку 123456789 и запишите ее в переменную str. Выведите значение этой переменной на экран.

// let x = '';
// for (let i = 1; i <= 8; i++) {
//     x += i;
// }
// console.log(x);

// С помощью цикла сформируйте строку 987654321 и запишите ее в переменную str. Выведите значение этой переменной на экран.
// let x = '';
// for (let i = 9; i >= 1; i--) {
//     x += i;
// }
// console.log(x);

//С помощью цикла сформируйте строку -1-2-3-4-5-6-7-8-9- и запишите ее в переменную str. Выведите значение этой переменной на экран.
// let x = '';
// for (let i = -1; i >= -9; i--) {
//     x += i;
// }
// console.log(x);

// Цикл
// for и типы данных JavaScript

// Переберите циклом числа от 10 до 1000 и выведите на экран те числа, сумма двух первых цифр которых равна 5.
// for (let i = 10; i <= 1000; i++) {
//     let str = String(i);
//     if ((+str[0] + Number(str[1])) == 5) {
//         console.log(i);
//     }
// }
// Переберите циклом числа от 1 до 30 и сложите их как строки.
// let result = '';
// for (let i = 1; i <= 30; i++) {
//     result += i;
// }
// console.log(result);

// Вложенные циклы в JavaScript

// С помощью двух вложенных циклов выведите на экран следующую строку:

// 111222333444555666777888999

// for (let i = 1; i <= 9; i++) {
//     for (let j = 1; j <= 3; j++) {
//         document.write(i);
//     }
// }

// С помощью двух вложенных циклов выведите на экран следующую строку:

// 11 12 13 21 22 23 31 32 33
// for (let i = 11; i <= 33; i += 10) {
//     for (let j = 0; j < 3; j++) {
//         let num = i + j;
//         document.write(num + " ")
//     }
// }

// Заполнение массивов через цикл в JavaScrip

// let arr = [];
// arr[0] = 1;
// arr[1] = 2;
// arr[2] = 3;
// arr[3] = 4;
// arr[4] = 5;
// arr[5] = 6;
// arr[6] = 7;
// arr[7] = 8;
// arr[8] = 9;
// arr[9] = 10;
// console.log(arr);

// Объявите пустой массив, а затем заполните его 5-ю буквами x.

// let arr = [];
// arr[0] = "x";
// arr[1] = "x";
// arr[2] = "x";
// arr[3] = "x";
// arr[4] = "x";
// console.log(arr);

// С помощью цикла заполните массив числами от 1 до 100.

// let arr = [];
// for (let i = 0; i <= 99; i++) {
//     arr[i] = i + 1;
// }
// console.log(arr);

// Заполнение значениями не по порядку

// С помощью цикла заполните массив нечетными числами в промежутке от 1 до 99.

// let arr = [];
// for (let i = 1, j = 0; i <= 99; i += 2, j++) {
//     arr[j] = i;
// }
// console.log(arr);

// Изменение массива в цикле JavaScript

// Дан массив с числами. Переберите этот массив циклом и возведите каждый элемент этого массива в квадрат.

// let arr = [2, 3, 4, 5];
// for (let i = 0; i < arr.length; i++) {
//     arr[i] = arr[i] ** 2;
// }
// console.log(arr);

// Сокращенные операции

// Дан массив с числами. Переберите этот массив циклом и отнимите от каждого элемента единицу.

// let arr = [2, 3, 4, 5];
// for (let i = 0; i < arr.length; i++) {
//     arr[i] -= 1;
// }
// console.log(arr);

// Дан массив с числами. Переберите этот массив циклом и прибавьте к каждому элементу 10.

// let arr = [2, 3, 4, 5];
// for (let i = 0; i < arr.length; i++) {
//     arr[i] += 10
// }
// console.log(arr);

// Заполнение массива методом push в JavaScript

// Объявите пустой массив, а затем заполните его числами от 1 до 10. Используйте для этого метод push.

// let arr = [];
// arr.push(1);
// arr.push(2);
// arr.push(3);
// arr.push(4);
// arr.push(5);
// arr.push(6);
// arr.push(7);
// arr.push(8);
// arr.push(9);
// arr.push(10);
// console.log(arr);

// Заполнение массива в цикле

// Используя цикл и метод push заполните массив числами от 1 до 10.
// let arr = [];
// for (let i = 1; i <= 10; i++) {
//     arr.push(i);
// }
// console.log(arr);

// Используя цикл и метод push заполните массив 10-ю буквами x.

// let arr = [];
// for (let i = 1; i <= 10; i++) {
//     arr.push('x');
// }
// console.log(arr);

// Используя цикл и метод push заполните массив 10-ю случайными целыми числами. Пусть случайные числа будут в промежутке от 1 до 10.

// let arr = [];
// for (let i = 1; i <= 10; i++) {
// arr.push(Math.floor(Math.random(i) * 10) + 1);
// }
// console.log(arr);

// Заполнение массива из другого массива

// Дан массив с числами. Переберите его циклом и запишите в новый массив только положительные из чисел.

// let arr = [1, -1, 2, 4, -5];
// let result_arr = [];

// for (let elem of arr) {
//     if (elem < 0) {
//         result_arr.push(elem);
//     }
// }
// console.log(result_arr);

// Переворот массива

// Даны следующий массив:

// let arr = ['a', 'b', 'c', 'd', 'e'];
// Описанным способом сделайте из него массив:

// let arr = ['e', 'd', 'c', 'b', 'a'];

// let arr = ['a', 'b', 'c', 'd', 'e'];
// let result = [];
// for (let i = arr.length - 1; i >= 0; i--) {
//     result.push(arr[i]);
// }
// console.log(result);

// Необъявленный массив

// Автор следующего кода хотел записать в новый массив только нечетные элементы старого массива:

// let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
// let result = [];
// for (let elem of arr) {
//     if (elem % 2 != 0) {
//         result.push(elem);
//     }
// }

// console.log(result);

// Заполнение объектов через цикл в JavaScript

// Объявите пустой объект, а затем заполните его названиями дней недели в качестве ключей, и порядковыми номерами дней недели в качестве значений.

// let obj = {};
// obj["monday"] = 1;
// obj["tuesday"] = 2;
// obj["wednesday"] = 3;
// obj["thursady"] = 4;
// obj["friday"] = 5;
// obj["saturday"] = 6;
// obj["sunday"] = 7;

// console.log(obj);

// Заполнение объекта в цикле

// Даны два массива: первый с названиями дней недели, а второй - с их порядковыми номерами:

// let arr1 = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
// let arr2 = [1, 2, 3, 4, 5, 6, 7];
// С помощью цикла создайте объект, ключами которого будут названия дней, а значениями - их номера.

// let arr1 = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
// let arr2 = [1, 2, 3, 4, 5, 6, 7];
// let obj = {};

// for (let i = 0; i <= 6; i++) {
//     let key = arr1[i];
//     let value = arr2[i];
//     obj[key] = value
// }
// console.log(obj)

// Модифицируйте предыдущую задачу так, чтобы ключами стали номера дней, а значениями - их названия.

// let arr1 = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
// let arr2 = [1, 2, 3, 4, 5, 6, 7];
// let obj = {};

// for (let i = 0; i <= 6; i++) {
//     obj[arr2[i]] = [arr1[i]];
// }
// console.log(obj);

// Заполнение объекта из другого объекта

// Дан объект:

// let obj = {'a': 12, 'b': 21, 'c': 13, 'd': 23, 'e': 17};
// Запишите в новый объект те элементы, значения которых расположены в промежутке от 10 до 20.

// let obj = {
//     'a': 12,
//     'b': 21,
//     'c': 13,
//     'd': 23,
//     'e': 17
// };
// let result = {};
// for (let key in obj) {
//     if (obj[key] >= 10 && obj[key] <= 20) {
//         result[key] = obj[key];
//     }
// }
// console.log(result);

// Дан объект:

// let obj = {1: 'пн', 2: 'вт', 3: 'ср', 4: 'чт', 5: 'пт', 6: 'сб', 7: 'вс'};
// Запишите в новый объект дни недели, номера которых являются нечетными числами.

// let obj = {
//     1: 'пн',
//     2: 'вт',
//     3: 'ср',
//     4: 'чт',
//     5: 'пт',
//     6: 'сб',
//     7: 'вс'
// };
// let result = {};

// for (let key in obj) {
//     if (key % 2 != 0) {
//         result[key] = obj[key];
//     }
// }
// console.log(result);

// let obj = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5};
// Переберите этот объект циклом и возведите каждый элемент этого объекта в квадрат.

// let obj = {
//     'a': 1,
//     'b': 2,
//     'c': 3,
//     'd': 4,
//     'e': 5
// };

// for (let key in obj) {
//     obj[key] = obj[key] ** 2
// }
// console.log(obj);

// Обмен ключей и значений объекта

// let obj = {
//     1: 'пн',
//     2: 'вт',
//     3: 'ср',
//     4: 'чт',
//     5: 'пт',
//     6: 'сб',
//     7: 'вс'
// };
// let result = {};

// for (let key in obj) {
//     result[obj[key]] = key;
// }
// console.log(result);

// Практика на циклы с массивами и объектами JavaScript

// Дан следующий объект с работниками и их зарплатами:

// let obj = {
// 	employee1: 100,
// 	employee2: 200,
// 	employee3: 300,
// 	employee4: 400,
// 	employee5: 500,
// 	employee6: 600,
// 	employee7: 700,
// };
// Увеличьте зарплату каждого работника на 10%.

// let obj = {
//     employee1: 100,
//     employee2: 200,
//     employee3: 300,
//     employee4: 400,
//     employee5: 500,
//     employee6: 600,
//     employee7: 700,
// };

// for (let employee in obj) {
//     obj[employee] *= 1.1;
// }
// console.log(obj);

// Модифицируйте предыдущую задачу так, чтобы зарплата увеличивалась только тем работникам, у которых она меньше или равна 400.

// let obj = {
//     employee1: 100,
//     employee2: 200,
//     employee3: 300,
//     employee4: 400,
//     employee5: 500,
//     employee6: 600,
//     employee7: 700,
// };
// for (let salary in obj) {
//     if (obj[salary] <= 400) {
//         obj[salary] += (obj[salary] / 100) * 10;
//     }
// }
// console.log(obj);

// Даны следующие массивы:

// let arr1 = [1, 2, 3, 4, 5];
// let arr2 = [6, 7, 8, 9, 10];
// С помощью этих массивов создайте новый объект, сделав его ключами элементы первого массива, а значениями - элементы второго.

// let arr1 = [1, 2, 3, 4, 5];
// let arr2 = [6, 7, 8, 9, 10];
// let obj = {};
// for (let i = 0; i <= 4; i++) {
//     obj[arr1[i]] = arr2[i]
// }
// console.log(obj);

// Дан следующий объект:

//     let obj = {
//         1: 6,
//         2: 7,
//         3: 8,
//         4: 9,
//         5: 10
//     };
// Найдите сумму ключей этого объекта и поделите ее на сумму значений.

// let obj = {
//     1: 6,
//     2: 7,
//     3: 8,
//     4: 9,
//     5: 10
// };
// let result = 0;
// let sum1 = 0;
// let sum2 = 0;
// for (let key in obj) {
//     sum1 += +key;
//     sum2 += obj[key];
//     result = sum1 / sum2;
// }
// console.log(result);

// Дан следующий объект:

// let obj = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5};
// Запишите ключи этого объекта в один массив, а значения - в другой.

// let obj = {
//     'a': 1,
//     'b': 2,
//     'c': 3,
//     'd': 4,
//     'e': 5
// };
// let arr1 = [];
// let arr2 = [];
// for (let key in obj) {
//     arr1.push(key);
//     arr2.push(obj[key]);
// }
// console.log(arr1);
// console.log(arr2)

// Задача 

// Дан следующий объект:

// let obj = {
// 	1: 125,
// 	2: 225,
// 	3: 128,
// 	4: 356,
// 	5: 145,
// 	6: 281,
// 	7: 452,
// };
// Запишите в новый массив элементы, значение которых начинается с цифры 1 или цифры 2.

// То есть у вас в результате получится вот такой массив:

// let arr = [
// 	125,
// 	225,
// 	128,
// 	145,
// 	281,
// ];

// let obj = {
//     1: 125,
//     2: 225,
//     3: 128,
//     4: 356,
//     5: 145,
//     6: 281,
//     7: 452,
// };
// let arr = [];
// for (let key in obj) {
//     if (obj[key] >= 100 && obj[key] < 300) {
//         arr.push(obj[key]);
//     }
// }
// console.log(arr);

// Дан следующий массив:

// let arr = ['a', 'b', 'c', 'd', 'e'];
// Создайте из этого массива следующий объект:

// let arr = {
//     1: 'a',
//     2: 'b',
//     3: 'c',
//     4: 'd',
//     5: 'e'
// };

// let arr = ['a', 'b', 'c', 'd', 'e'];
// let obj = {};
// for (let key = 0; key <= 4; key++) {
//     obj[key + 1] = arr[key];
// }
// console.log(obj)

// Дан следующий массив:

// let arr = ['a', 'b', 'c', 'd', 'e'];
// Создайте из этого массива следующий объект:

// let arr = {
//     'a': 1,
//     'b': 2,
//     'c': 3,
//     'd': 4,
//     'e': 5
// };

// let arr = ['a', 'b', 'c', 'd', 'e'];
// let obj = {};
// for (let key = 0; key <= 4; key++) {
//     obj[arr[key]] = 1 + key;
// }
// console.log(obj)

// Подсчет количества элементов в массиве JavaScript

// let arr = [1, 2, 3, 2, 4, 3, 5, 6, 3, 2, 3];
// Подсчитайте количество цифр 3 в этом массиве.

// let arr = [1, 2, 3, 2, 4, 3, 5, 6, 3, 2, 3];
// let count = 0;

// for (let elem of arr) {
//     if (elem == 3) {
//         count++;
//     }
// }
// console.log(count);

// Модифицируйте предыдущую задачу так, чтобы в одном цикле одновременно подсчитывалось и количество троек, и количество двоек.

// let arr = [1, 2, 3, 2, 4, 3, 5, 6, 3, 2, 3];
// let count = 0;

// for (let elem of arr) {
//     if (elem == 3 || elem == 2) {
//         count++;
//     }
// }
// console.log(count);

// Результат в виде объекта

// Пусть у нас опять дан наш массив:

// let arr = ['a', 'b', 'c', 'a', 'a', 'b'];
// Давайте подсчитаем сколько каких элементов есть в этом массиве и представим результат в виде объекта вот такого объекта:

// {a: 3, b: 2, c: 1}

// let arr = ['a', 'b', 'c', 'a', 'a', 'b'];
// let obj = {};

// for (let elem of arr) {
//     if (obj[elem] === undefined) {
//         obj[elem] = 1;
//     } else {
//         obj[elem]++;
//     }
// }
// console.log(obj)

// Получение соседей элементов в массиве JavaScript

// Дан массив с числами. Переберите его циклом и в каждой итерации цикла выведите следующий элемент массива.

// let arr = [2, 4, 6, 7, 2, 3];
// for (let i = 1; i < arr.length; i++) {
//     console.log(arr[i]);
// }

// Модифицируйте предыдущую задачу так, чтобы в каждой итерации цикла выводилась сумма текущего и следующего элемента массива.

// let arr = [2, 4, 6, 7, 2, 3];
// for (let i = 1; i < arr.length; i++) {
//     console.log(arr[i - 1] + arr[i])
// }

// Дан массив с числами. Переберите его циклом и в каждой итерации цикла выведите два предыдущих элемента массива.

// let arr = [2, 4, 6, 7, 2, 3];
// for (let i = 2; i < arr.length; i++) {
//     console.log(arr[i - 2], arr[i - 1])
// }

// Модифицируйте предыдущую задачу так, чтобы в каждой итерации цикла выводилась сумма двух предыдущих элементов и текущего элемента массива.

// let arr = [2, 4, 6, 7, 2, 3];
// for (let i = 2; i < arr.length; i++) {
//     console.log(arr[i - 2] + arr[i - 1] + arr[i])
// }

// Дан массив с числами. Переберите его циклом и в каждой итерации цикла выведите сумму предыдущего, текущего и следующего элементов массива.

// let arr = [2, 4, 6, 7, 2, 3];
// for (let i = 1; i < arr.length - 1; i++) {
//     console.log(arr[i - 1] + arr[i] + arr[i + 1])
// }

// Получение чисел Фибоначчи в JavaScript

// let one = 0;
// let two = 1;

// for (let i = 1; i <= 100; i++) {
//     let current = one + two;

//     one = two;
//     two = current;
//     console.log(current)
// }

// Решите задачу на нахождение ряда чисел, каждое из которых равно сумме трех предыдущих, а первые три числа равны 0, 1 и 2.

// let one = 0;
// let two = 1;
// let three = 2;

// for (let i = 1; i <= 10; i++) {
//     let current = one + two + three;

//     one = two;
//     two = three;
//     three = current;
//     console.log(current)
// }

// Вывод пирамидок на JavaScript

// Выведите на экран следующую пирамидку:

// xx
// xxxx
// xxxxxx
// xxxxxxxx
// xxxxxxxxxx

// let str = '';
// for (let i = 1; i <= 5; i++) {
//     str += 'xx';
//     document.write(str + '<br>');
// }

// Пирамидка с цифрами
// Выведите на экран следующую пирамидку:

// 1
// 333
// 55555
// 7777777
// 999999999

// for (let i = 1; i <= 9; i = i + 2) {
//     let str = '';
//     for (let j = 1; j <= i; j++) {
//         str += i;

//     }
//     document.write(str + '<br>');
// }

// Перевернутые пирамидки

// Выведите на экран следующую пирамидку:

// xxxxxxxxxx
// xxxxxxxx
// xxxxxx
// xxxx
// xx
// for (let i = 10; i >= 1; i = i - 2) {
//     let str = '';

//     for (let j = 0; j < i; j++) {
//         str += 'x';
//     }

//     document.write(str + '<br>');
// }
// Выведите на экран следующую пирамидку:

// 999999999
// 88888888
// 7777777
// 666666
// 55555
// 4444
// 333
// 22
// 1
// for (let i = 9; i >= 1; i--) {
//         let str = '';

//         for (let j = 0; j < i; j++) {
//             str += i;
//         }

//         console.log(str + '<br>');
//     }

// Заполнение массивов с накоплением строки в JavaScript

// let arr = [];
// let str = '';
// for (let i = 0; i <= 4; i++) {
//     str += 'xx';
//     arr.push(str);
// }
// console.log(arr)

// Заполнение массива числами

// С помощью цикла сформируйте следующий массив:

// ['11111', '22222', '33333', '44444', '55555']

// let arr = [];

// for (let i = 1; i <= 5; i++) {
//     let str = '';
//     for (let j = 1; j <= 5; j++) {
//         str += i;
//     }
//     arr.push(str);
// }
// console.log(arr)

// Отработка циклов JavaScript

// Задача 

// Выведите с помощью цикла столбец чисел от 1 до 100.

// for (let i=1; i<=100; i++){
//     console.log(i)
// }

// Выведите с помощью цикла столбец чисел от 100 до 1.

// for (let i = 100; i > 0; i--) {
//     console.log(i)
// }

// Выведите с помощью цикла столбец четных чисел от 1 до 100.
// for (let i = 1; i <= 100; i++) {
//     if (i % 2 == 0) {
//         console.log(i)
//     }
// }

// Заполните массив 10-ю иксами с помощью цикла.

// let arr = [];
// for (let i = 1; i <= 10; i++) {
//     let str = 'x';
//     arr.push(str);
// }
// console.log(arr)

// Заполните массив числами от 1 до 10 с помощью цикла.
// let arr = [];
// for (let i = 1; i <= 10; i++) {
//     arr.push(i)
// }
// console.log(arr)

// Дан массив с числами. С помощью цикла выведите только те элементы массива, которые больше нуля и меньше 10-ти.


// let arr = [-10, 0, 3, 4, 6, 10, 15]

// for (let i = 0; i <= arr.length; i++) {
//     if (arr[i] > 0 && arr[i] < 10) {
//         console.log(arr[i])
//     }
// }

// Дан массив с числами. С помощью цикла проверьте, что в нем есть элемент со значением 5.

// let arr = [-10, 0, 3, 4, 6, 10, 15];
// for (let i = 0; i <= arr.length; i++) {
//     if (arr[i] == 5) {
//         console.log('exist');
//     } else {
//         console.log('not exist')
//     }
// }

// Дан массив с числами. С помощью цикла найдите сумму элементов этого массива.

// let arr = [-10, 0, 3, 4, 6, 10, 15];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {

//     result += arr[i];
// }
// console.log(result)

// Дан массив с числами. С помощью цикла найдите сумму квадратов элементов этого массива.
// let arr = [-10, 0, 3, 4, 6, 10, 15];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
//     result += arr[i] ** 2
// }
// console.log(result)

// Дан массив с числами. Найдите среднее арифметическое его элементов (сумма элементов, делить на количество).

// let arr = [-10, 0, 3, 4, 6, 10, 15];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
//     result += arr[i] / arr.length;
// }
// console.log(result)

// Напишите скрипт, который будет находить факториал числа. Факториал (обозначается !) - это произведение (умножение) всех целых чисел, меньше данного, и его самого. Например, 4! = 1*2*3*4
// let fact = 1;
// let num = 4;
// for (let i = 1; i <= num; i++) {
//     fact = fact * i;
// }
// console.log(fact);

// Многомерные массивы в JavaScript

// let arr = [
// 	['a', 'b', 'c'],
// 	['d', 'e', 'f'],
// 	['g', 'h', 'i'],
// 	['j', 'k', 'l'],
// ];
// Выведите с его помощью элементы с текстом 'l', 'e', 'g' и 'a'.

// let arr = [
//     ['a', 'b', 'c'],
//     ['d', 'e', 'f'],
//     ['g', 'h', 'i'],
//     ['j', 'k', 'l'],
// ];
// console.log(arr[3][2]);
// console.log(arr[1][1]);
// console.log(arr[2][0]);
// console.log(arr[0][0])

// Задача 

// Дан следующий массив:

// let arr = [[1, 2], [3, 4], [5, 6]];
// Найдите сумму всех его элементов.

// let arr = [
//     [1, 2],
//     [3, 4],
//     [5, 6]
// ];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
//     for (let j = 0; j < arr[i].length; j++) {
//         result += arr[i][j];
//     }
// }
// console.log(result)

// Трехмерный массив

// Задача 

// Дан следующий массив:

// let arr = [
// 	[
// 		[1, 2],
// 		[3, 4],
// 	],
// 	[
// 		[5, 6],
// 		[7, 8],
// 	],
// ];

// let arr = [
//     [
//         [1, 2],
//         [3, 4],
//     ],
//     [
//         [5, 6],
//         [7, 8],
//     ],
// ];
// let result = 0
// for (let i = 0; i < arr.length; i++) {
//     for (let j = 0; j < arr[i].length; j++) {
//         for (let k = 0; k < arr[i][j].length; k++) {
//             result += arr[i][j][k]
//         }
//     }
// }
// console.log(result)

// Произвольные массивы

// Задача 

// Дан следующий массив:

// let arr = [[1, 2, 3, [4, 5, [6, 7]]], [8, [9, 10]]];
// Найдите сумму всех элементов приведенного массива.

// let arr = [
//     [1, 2, 3, [4, 5, [6, 7]]],
//     [8, [9, 10]]
// ];

// let result = arr[0][0] + arr[0][1] + arr[0][2] + arr[0][3][0] + arr[0][3][1] + arr[0][3][2][0] + arr[0][3][2][1] + arr[1][0] + arr[1][1][0] + arr[1][1][1]
// console.log(result)

// Перебор многомерных массивов в JavaScript

// Дан двухмерный массив с числами:

// let arr = [[1, 2, 3], [4, 5], [6]];
// С помощью вложенных циклов найдите сумму элементов этого массива.

// let arr = [
//     [1, 2, 3],
//     [4, 5],
//     [6]
// ];
// let sum = 0

// for (let subArr of arr) {
//     for (let elem of subArr) {
//         sum += elem;
//     }
// }
// console.log(sum)

// Дан трехмерный массив с числами:

// let arr = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]];
// С помощью вложенных циклов найдите сумму элементов этого массива.

// let arr = [
//     [
//         [1, 2],
//         [3, 4]
//     ],
//     [
//         [5, 6],
//         [7, 8]
//     ]
// ];
// let sum = 0

// for (let subArr of arr) {
//     for (let elem of subArr) {
//         for (let i = 0; i < arr.length; i++) {
//             sum += elem[i];
//         }
//     }
// }
// console.log(sum)

// Перебор через обычный for

// Решите предыдущие две задачи через цикл for.

// let arr = [
//     [1, 2, 3],
//     [4, 5],
//     [6]
// ];
// let sum = 0

// for (let i = 0; i < arr.length; i++) {
//     for (let j = 0; j < arr[i].length; j++) {
//         sum += arr[j][i];
//     }
// }
// console.log(sum)

// let arr = [
//     [
//         [1, 2],
//         [3, 4]
//     ],
//     [
//         [5, 6],
//         [7, 8]
//     ]
// ];
// let sum = 0

// for (let i = 0; i < arr.length; i++) {
//     for (let j = 0; j < arr[i].length; j++) {
//         for (let k = 0; k < arr[j][i].length; k++) {
//             sum += arr[k][j][i]
//         }
//     }
// }
// console.log(sum)

// Заполнение многомерных массивов JavaScript

// Сформируйте с помощью двух вложенных циклов следующий массив:

// [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]

// let arr = [];

// for (let i = 0; i < 3; i++) {
//     arr[i] = [];
//     for (let j = 0; j < 5; j++) {
//         arr[i][j] = j + 1;
//     }
// }
// console.log(arr)

// Сформируйте с помощью двух вложенных циклов следующий массив:

// [['x', 'x', 'x', 'x'], ['x', 'x', 'x', 'x'], ['x', 'x', 'x', 'x']]

// let arr = [];
// for (let i = 0; i < 3; i++) {
//     arr[i] = [];
//     for (let j = 0; j < 4; j++) {
//         arr[i][j] = 'x';
//     }
// }
// console.log(arr)

// Сформируйте с помощью трех вложенных циклов следующий массив:

// [
// 	[
// 		[1, 2, 3, 4, 5],
// 		[1, 2, 3, 4, 5],
// 	],
// 	[
// 		[1, 2, 3, 4, 5],
// 		[1, 2, 3, 4, 5],
// 	],
// 	[
// 		[1, 2, 3, 4, 5],
// 		[1, 2, 3, 4, 5],
// 	],
// ]

// let arr = [];

// for (let i = 0; i < 3; i++) {
//     arr[i] = [];
//     for (let j = 0; j < 2; j++) {
//         arr[i][j] = [];
//         for (let k = 0; k < 5; k++) {
//             arr[i][j][k] = k + 1;
//         }
//     }
// }
// console.log(arr);

// Потенциальная проблема

// let arr = [];

// for (let i = 0; i < 3; i++) {
//     arr[i] = [];
//     for (let j = 1; j <= 5; j++) {
//         arr[i].push(j);
//     }
// }

// console.log(arr);

// let arr = [];
// for (let i = 0; i < 3; i++) {
//     arr[i] = [];

//     for (let j = 0; j <= 5; j++) {
//         arr[i].push(j);
//     }
// }

// console.log(arr);

// Заполнение числами по порядку

// Сформируйте с помощью двух вложенных циклов следующий массив:

// [[1, 2], [3, 4], [5, 6], [7, 8]]

// let arr = [];
// for (let i = 0, k = 1; i < 4; i++) {
//     arr[i] = [];
//     for (let j = 0; j < 2; j++, k++) {
//         arr[i][j] = k;
//     }
// }
// console.log(arr)

// Сформируйте с помощью двух вложенных циклов следующий массив:

// [[2, 4, 6], [8, 10, 12], [14, 16, 18], [20, 22, 24]]

// let arr = [];
// for (let i = 0, k = 2; i < 4; i++) {
//     arr[i] = [];
//     for (let j = 0; j < 3; j++) {
//         arr[i][j] = k;
//         k += 2
//     }
// }
// console.log(arr)

// Сформируйте с помощью трех вложенных циклов следующий трехмерный массив:

// [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]

// let arr = [];
// for (let i = 0, y = 1; i < 2; i++) {
//     arr[i] = [];
//     for (let j = 0; j < 2; j++) {
//         arr[i][j] = [];
//         for (let k = 0; k < 2; k++, y++) {
//             arr[i][j][k] = y;
//         }
//     }
// }
// console.log(arr)

// let arr = [];

// for (let i = 0, k = 1; i < 3; i++) {
//     arr[i] = [];

//     for (let j = 0; j < 3; j++) {
//         arr[i][j] = k;
//         k++;
//     }
// }

// console.log(arr);

// let arr = [];

// for (let i = 0, k = 1; i < 3; i++) {
// 	arr[i] = [];

// 	for (let j = 0; j < 3; j++, k++) {
// 		arr[i][j] = k;
// 	}
// }

// console.log(arr);

// Многомерные объекты в JavaScript

// Дан следующий объект:

// let obj = {
// 	key1: {
// 		key1: 1,
// 		key2: 2,
// 		key3: 3,
// 	},
// 	key2: {
// 		key1: 4,
// 		key2: 5,
// 		key3: 6,
// 	},
// 	key3: {
// 		key1: 7,
// 		key2: 8,
// 		key3: 9,
// 	},
// }
// Найдите сумму элементов приведенного объекта.

// let obj = {
//     key1: {
//         key1: 1,
//         key2: 2,
//         key3: 3,
//     },
//     key2: {
//         key1: 4,
//         key2: 5,
//         key3: 6,
//     },
//     key3: {
//         key1: 7,
//         key2: 8,
//         key3: 9,
//     },
// }

// let sumKey1 = obj.key1.key1 + obj.key1.key2 + obj.key1.key3;
// let sumKey2 = obj.key2.key1 + obj.key2.key2 + obj.key2.key3;
// let sumKey3 = obj.key3.key1 + obj.key3.key2 + obj.key3.key3
// console.log(sumKey1 + sumKey2 + sumKey3)

// Дан следующий объект:

// let obj = {
// 	1: {
// 		1: 'a1',
// 		2: 'a2',
// 		3: 'a3',
// 	},
// 	2: {
// 		1: 'b1',
// 		2: 'b2',
// 		3: 'b3',
// 	},
// 	3: {
// 		1: 'c1',
// 		2: 'c2',
// 		3: 'c3',
// 	},
// }
// Выведите на экран элемент 'b2' и элемент 'c1'.

// let obj = {
// 	1: {
// 		1: 'a1',
// 		2: 'a2',
// 		3: 'a3',
// 	},
// 	2: {
// 		1: 'b1',
// 		2: 'b2',
// 		3: 'b3',
// 	},
// 	3: {
// 		1: 'c1',
// 		2: 'c2',
// 		3: 'c3',
// 	},
// }

// console.log(obj[2][2], obj[3][1])

// Задача 

// Дан следующий объект:

// let obj = {
// 	key1: {
// 		a: 1, b: 2, c: {
// 			d: 3,
// 			e: 4,
// 		}, f: 5,
// 	},
// 	key2: {
// 		g: 6, h: 7,
// 	},
// }
// Найдите сумму всех элементов-чисел.

// let obj = {
//     key1: {
//         a: 1,
//         b: 2,
//         c: {
//             d: 3,
//             e: 4,
//         },
//         f: 5,
//     },
//     key2: {
//         g: 6,
//         h: 7,
//     },
// }
// let sumKey1 = obj.key1.a + obj.key1.b + obj.key1.c.d + obj.key1.c.e + obj.key1.f;
// let sumKey2 = obj.key2.g + obj.key2.h;
// console.log(sumKey2 + sumKey1);

// Перебор многомерных объектов в JavaScript

// Дан следующий объект:

// let obj = {
// 	1: {
// 		1: 11,
// 		2: 12,
// 		3: 13,
// 	},
// 	2: {
// 		1: 21,
// 		2: 22,
// 		3: 23,
// 	},
// 	3: {
// 		1: 24,
// 		2: 25,
// 		3: 26,
// 	},
// }
// Используя циклы, найдите сумму элементов этого объекта.

// let obj = {
//     1: {
//         1: 11,
//         2: 12,
//         3: 13,
//     },
//     2: {
//         1: 21,
//         2: 22,
//         3: 23,
//     },
//     3: {
//         1: 24,
//         2: 25,
//         3: 26,
//     },
// }

// let sum = 0;
// for (let key in obj) {
//     let subObj = obj[key]
//     for (let subKey in subObj) {
//         sum += subObj[subKey]
//     }
// }
// console.log(sum)

// Ключи из переменных в многомерных структурах JavaScript

// Дан следующий объект с названиями месяцев:

// let months = {
// 	'ru': [
// 		'январь',
// 		'февраль',
// 		'март',
// 		'апрель',
// 		'май',
// 		'июнь',
// 		'июль',
// 		'август',
// 		'сентябрь',
// 		'октябрь',
// 		'ноябрь',
// 		'декабрь',
// 	],
// 	'en': [
// 		'january',
// 		'february',
// 		'march',
// 		'april',
// 		'may',
// 		'june',
// 		'july',
// 		'august',
// 		'september',
// 		'october',
// 		'november',
// 		'december',
// 	],
// };
// Даны также следующие переменные:

// let lang = 'ru'; // может быть или 'ru' или 'en'
// let month = 5; // число от 0 до 12
// Выведите на экран название месяца, соответствующее значениям переменных lang и month.
// let months = {
//     'ru': [
//         'январь',
//         'февраль',
//         'март',
//         'апрель',
//         'май',
//         'июнь',
//         'июль',
//         'август',
//         'сентябрь',
//         'октябрь',
//         'ноябрь',
//         'декабрь',
//     ],
//     'en': [
//         'january',
//         'february',
//         'march',
//         'april',
//         'may',
//         'june',
//         'july',
//         'august',
//         'september',
//         'october',
//         'november',
//         'december',
//     ],
// };

// let lang = 'ru'; // может быть или 'ru' или 'en'
// let month = 5; // число от 0 до 12

// console.log(months[lang][month]);

// Дана вот такая структура для хранения списка дел за года, месяцы и дни:

// let affairs = {
// 	'2018': {
// 		11: {
// 			29: ['дело111', 'дело112', 'дело113'],
// 			30: ['дело121', 'дело122', 'дело123'],
// 		},
// 		12: {
// 			30: ['дело211', 'дело212', 'дело213'],
// 			31: ['дело221', 'дело222', 'дело223'],
// 		},
// 	},
// 	'2019': {
// 		12: {
// 			29: ['дело311', 'дело312', 'дело313'],
// 			30: ['дело321', 'дело322', 'дело323'],
// 			31: ['дело331', 'дело332', 'дело333'],
// 		}
// 	},
// }
// Пусть даны также 3 переменные, содержащие год, месяц и день. Выведите дело, соответствующее значениям переменных.

// let affairs = {
//     '2018': {
//         11: {
//             29: ['дело111', 'дело112', 'дело113'],
//             30: ['дело121', 'дело122', 'дело123'],
//         },
//         12: {
//             30: ['дело211', 'дело212', 'дело213'],
//             31: ['дело221', 'дело222', 'дело223'],
//         },
//     },
//     '2019': {
//         12: {
//             29: ['дело311', 'дело312', 'дело313'],
//             30: ['дело321', 'дело322', 'дело323'],
//             31: ['дело331', 'дело332', 'дело333'],
//         }
//     },
// }

// let year = '2018';
// let month = 12;
// let day = 30;
// console.log(affairs[year][month][day][1])

// Многомерные массивы и объекты в JavaScript

// Дан следующий массив работников:
// let employees = [
//  {
//      name: 'name1',
//      salary: 300,
//  },
//  {
//      name: 'name2',
//      salary: 400,
//  },
//  {
//      name: 'name3',
//      salary: 500,
//  },
// ];
// Выведите на экран сумму зарплат первого и второго работников.
// let employees = [{
//         name: 'name1',
//         salary: 300,
//     },
//     {
//         name: 'name2',
//         salary: 400,
//     },
//     {
//         name: 'name3',
//         salary: 500,
//     },
// ];
// console.log(employees[0], employees[1])
// Дан следующий массив студентов:
// let students = {
//  'boys':  ['Коля', 'Вася', 'Петя'],
//  'girls': ['Даша', 'Маша', 'Лена'],
// };
// Выведите на экран элемент 'Вася' и элемент 'Лена'.
// let students = {
//     'boys': ['Коля', 'Вася', 'Петя'],
//     'girls': ['Даша', 'Маша', 'Лена'],
// };
// console.log(students['boys'][1], students['girls'][2])

// Перебор многомерных комбинаций в JavaScript

// Дан следующий массив работников:

// let employees = [
// 	{
// 		name: 'name1',
// 		salary: 300,
// 	},
// 	{
// 		name: 'name2',
// 		salary: 400,
// 	},
// 	{
// 		name: 'name3',
// 		salary: 500,
// 	},
// ];
// Выведите на экран данные каждого работника в формате имя - зарплата.

// let employees = [{
//         name: 'name1',
//         salary: 300,
//     },
//     {
//         name: 'name2',
//         salary: 400,
//     },
//     {
//         name: 'name3',
//         salary: 500,
//     },
// ];

// for (let employee of employees) {
//     console.log(employee.name + ' ' + employee.salary + '<br>')
// }

// let employees = [
// 	{
// 		name: 'name1',
// 		salary: 300,
// 	},
// 	{
// 		name: 'name2',
// 		salary: 400,
// 	},
// 	{
// 		name: 'name3',
// 		salary: 500,
// 	},
// ];
// Выведите на экран сумму зарплат всех работников.

// let employees = [{
//         name: 'name1',
//         salary: 300,
//     },
//     {
//         name: 'name2',
//         salary: 400,
//     },
//     {
//         name: 'name3',
//         salary: 500,
//     },
// ];
// let result = 0

// for (let employee of employees) {
//     result += employee.salary
//     console.log(result)
// }

// Дан следующий массив работников:

// let employees = [
// 	{
// 		name: 'name1',
// 		salary: 300,
// 		age: 28,
// 	},
// 	{
// 		name: 'name2',
// 		salary: 400,
// 		age: 29,
// 	},
// 	{
// 		name: 'name3',
// 		salary: 500,
// 		age: 30,
// 	},
// 	{
// 		name: 'name4',
// 		salary: 600,
// 		age: 31,
// 	},
// 	{
// 		name: 'name5',
// 		salary: 700,
// 		age: 32,
// 	},
// ];
// Выведите на экран сумму зарплат тех работников, возраст которых равен или более 30 лет.

// let employees = [{
//         name: 'name1',
//         salary: 300,
//         age: 28,
//     },
//     {
//         name: 'name2',
//         salary: 400,
//         age: 29,
//     },
//     {
//         name: 'name3',
//         salary: 500,
//         age: 30,
//     },
//     {
//         name: 'name4',
//         salary: 600,
//         age: 31,
//     },
//     {
//         name: 'name5',
//         salary: 700,
//         age: 32,
//     },
// ];
// let sum = 0;

// for (let employee of employees) {
//     if (employee.age >= 30) {
//         sum += employee.salary;
//         console.log(sum);
//     }
// }

// Дан следующий массив работников, в котором поле dismissed хранит в себе информацию о том, уволен работник или нет (true - уволен):

// let employees = [
// 	{
// 		name: 'name1',
// 		salary: 300,
// 		dismissed: false,
// 	},
// 	{
// 		name: 'name2',
// 		salary: 400,
// 		dismissed: true,
// 	},
// 	{
// 		name: 'name3',
// 		salary: 500,
// 		dismissed: false,
// 	},
// 	{
// 		name: 'name4',
// 		salary: 600,
// 		dismissed: true,
// 	},
// 	{
// 		name: 'name5',
// 		salary: 700,
// 		dismissed: false,
// 	},
// ];
// Выведите на экран имена и зарплаты неуволенных работников.

// let employees = [{
//         name: 'name1',
//         salary: 300,
//         dismissed: false,
//     },
//     {
//         name: 'name2',
//         salary: 400,
//         dismissed: true,
//     },
//     {
//         name: 'name3',
//         salary: 500,
//         dismissed: false,
//     },
//     {
//         name: 'name4',
//         salary: 600,
//         dismissed: true,
//     },
//     {
//         name: 'name5',
//         salary: 700,
//         dismissed: false,
//     },
// ];
// for (let employee of employees) {
//     if (!employee.dismissed) {
//         console.log(employee.name + ' ' + employee.salary);
//     }
// }

// Сложные структуры

// Дана следующая структура с данными:

// let data = {
// 	1: [
// 		'data11',
// 		'data12',
// 		'data13',
// 	],
// 	2: [
// 		'data21',
// 		'data22',
// 		'data23',
// 	],
// 	3: [
// 		'data31',
// 		'data32',
// 		'data33',
// 		'data34',
// 		'data35',
// 	],
// 	4: [
// 		'data41',
// 		'data42',
// 	],
// };
// С помощью вложенных циклов выведите на экран все строки с данными.

// let data = {
//     1: [
//         'data11',
//         'data12',
//         'data13',
//     ],
//     2: [
//         'data21',
//         'data22',
//         'data23',
//     ],
//     3: [
//         'data31',
//         'data32',
//         'data33',
//         'data34',
//         'data35',
//     ],
//     4: [
//         'data41',
//         'data42',
//     ],
// };

// for (let key in data) {
//     for (let elem of data[key]) {
//         console.log(elem)
//     }
// }

// Дана следующая структура с данными:

// let data = [
// 	{
// 		1: 'data11',
// 		2: 'data12',
// 		3: 'data13',
// 		4: 'data14',
// 	},
// 	{
// 		1: 'data21',
// 		2: 'data22',
// 		3: 'data33',
// 	},
// 	{
// 		1: 'data31',
// 		2: 'data32',
// 	},
// ];
// Количество объектов в массиве и количество элементов в объекте может быть произвольным.

// С помощью вложенных циклов выведите на экран все строки с данными.

// let data = [{
//         1: 'data11',
//         2: 'data12',
//         3: 'data13',
//         4: 'data14',
//     },
//     {
//         1: 'data21',
//         2: 'data22',
//         3: 'data33',
//     },
//     {
//         1: 'data31',
//         2: 'data32',
//     },
// ];

// for (let elem of data) {
//     for (let key in elem) {
//         console.log(elem[key]);
//     }
// }

// let data = [
// 	{
// 		1: [
// 			'data111',
// 			'data112',
// 			'data113',
// 		],
// 		2: [
// 			'data121',
// 			'data122',
// 			'data123',
// 		],
// 	},
// 	{
// 		1: [
// 			'data211',
// 			'data212',
// 			'data213',
// 		],
// 		2: [
// 			'data221',
// 			'data222',
// 			'data223',
// 			'data224',
// 		],
// 		3: [
// 			'data231',
// 			'data232',
// 			'data233',
// 			'data234',
// 			'data235',
// 		],
// 	},
// 	{
// 		1: [
// 			'data411',
// 			'data412',
// 			'data413',
// 		],
// 		2: [
// 			'data421',
// 		],
// 	},
// ];
// С помощью вложенных циклов выведите на экран все строки с данными.

// let data = [{
//         1: [
//             'data111',
//             'data112',
//             'data113',
//         ],
//         2: [
//             'data121',
//             'data122',
//             'data123',
//         ],
//     },
//     {
//         1: [
//             'data211',
//             'data212',
//             'data213',
//         ],
//         2: [
//             'data221',
//             'data222',
//             'data223',
//             'data224',
//         ],
//         3: [
//             'data231',
//             'data232',
//             'data233',
//             'data234',
//             'data235',
//         ],
//     },
//     {
//         1: [
//             'data411',
//             'data412',
//             'data413',
//         ],
//         2: [
//             'data421',
//         ],
//     },
// ];

// for (let elem of data) {
//     for (let key in elem) {
//         for (let res of elem[key]) {
//             console.log(res)
//         }
//     }
// }

// Добавление элементов в многомерные массивы JavaScript

// Дан следующий массив с юзерами:

// let users = [
// 	{
// 		name: 'name1',
// 		surname: 'surname1',
// 		age: 30,
// 	},
// 	{
// 		name: 'name2',
// 		surname: 'surname2',
// 		age: 31,
// 	},
// 	{
// 		name: 'name2',
// 		surname: 'surname2',
// 		age: 32,
// 	},
// ];
// Добавьте в этот массив еще одного юзера.

// let users = [{
//         name: 'name1',
//         surname: 'surname1',
//         age: 30,
//     },
//     {
//         name: 'name2',
//         surname: 'surname2',
//         age: 31,
//     },
//     {
//         name: 'name2',
//         surname: 'surname2',
//         age: 32,
//     },
// ];

// users.push({
//     name: 'name3',
//     surname: 'surname3',
//     age: 33
// })

// console.log(users)

// Добавление элементов в многомерные объекты JavaScript

// let affairs = {
// 	'2019-12-28': ['дело11', 'дело12', 'дело13'],
// 	'2019-12-39': ['дело21', 'дело22', 'дело23'],
// 	'2019-12-30': ['дело31', 'дело32', 'дело33'],
// }
// Добавьте еще одно дело в дату '2019-12-29'. Добавьте еще два дела в дату '2019-12-31'.

// let affairs = {
//     '2019-12-28': ['дело11', 'дело12', 'дело13'],
//     '2019-12-29': ['дело21', 'дело22', 'дело23'],
//     '2019-12-30': ['дело31', 'дело32', 'дело33'],
// }

// affairs['2019-12-29'].push('affair24');
// console.log(affairs);

// affairs['2019-12-31']=[];
// affairs['2019-12-31'].push('affair1', 'affair2');
// console.log(affairs)

// let students = {
// 	'group1' {
// 		'subgroup11': ['student111', 'student112', 'student113'],
// 		'subgroup12': ['student121', 'student122', 'student123'],
// 	},
// 	'group2' {
// 		'subgroup21': ['student211', 'student212', 'student213'],
// 		'subgroup22': ['student221', 'student222', 'student223'],
// 	},
// 	'group3' {
// 		'subgroup31': ['student311', 'student312', 'student313'],
// 		'subgroup32': ['student321', 'student322', 'student323'],
// 	},
// };
// Задача 

// Добавьте нового студента в подгруппу 'subgroup11'.

// Задача 

// Добавьте в первую группу еще одну подгруппу.
// Задача 

// Сделайте четвертую группу, в ней сделайте подгруппу и добавьте в нее двух новых студентов.

// let students = {
//     'group1': {
//         'subgroup11': ['student111', 'student112', 'student113'],
//         'subgroup12': ['student121', 'student122', 'student123'],
//     },
//     'group2': {
//         'subgroup21': ['student211', 'student212', 'student213'],
//         'subgroup22': ['student221', 'student222', 'student223'],
//     },
//     'group3': {
//         'subgroup31': ['student311', 'student312', 'student313'],
//         'subgroup32': ['student321', 'student322', 'student323'],
//     },
// };
// // Добавьте нового студента в подгруппу 'subgroup11'.
// students.group1.subgroup11.push('student656');
// // Добавьте в первую группу еще одну подгруппу.
// students.group1.subgroup13 = [];
// // Сделайте четвертую группу, в ней сделайте подгруппу и добавьте в нее двух новых студентов.
// students['group4'] = {};
// students['group4']['subgroup41'] = [];
// students['group4']['subgroup41'].push('student432', 'student433')
// console.log(students)

// Автоматическое добавление

// Дана вот такая структура для хранения списка дел за определенные даты:

// let affairs = {
// 	'2019-12-28': ['дело11', 'дело12', 'дело13'],
// 	'2019-12-39': ['дело21', 'дело22', 'дело23'],
// 	'2019-12-30': ['дело31', 'дело32', 'дело33'],
// }
// Сделайте функцию addAffair, которая будет добавлять новое дело в заданную дату. Пусть функция первым параметром принимает дату, а вторым - дело.

// let affairs = {
// 	'2019-12-28': ['дело11', 'дело12', 'дело13'],
// 	'2019-12-39': ['дело21', 'дело22', 'дело23'],
// 	'2019-12-30': ['дело31', 'дело32', 'дело33'],
// }

// function addAffair(date, doc){
//     if (affairs[date] === undefined){
//         affairs[date]=[];
//     }
//     affairs[date].push(doc);
// }
// addAffair('2019-12-31', 'affair1');
// console.log(affairs);

// Дана вот такая структура для хранения студентов:

// let students = {
// 	'group1' {
// 		'subgroup11': ['student111', 'student112', 'student113'],
// 		'subgroup12': ['student121', 'student122', 'student123'],
// 	},
// 	'group2' {
// 		'subgroup21': ['student211', 'student212', 'student213'],
// 		'subgroup22': ['student221', 'student222', 'student223'],
// 	},
// 	'group3' {
// 		'subgroup31': ['student311', 'student312', 'student313'],
// 		'subgroup32': ['student321', 'student322', 'student323'],
// 	},
// };
// Сделайте функцию addStudent, которая будет добавлять нового студента. Пусть функция первым параметром принимает группу, а вторым - подгруппу, а третьим - имя студента.

// let students = {
//     'group1': {
//         'subgroup11': ['student111', 'student112', 'student113'],
//         'subgroup12': ['student121', 'student122', 'student123'],
//     },
//     'group2': {
//         'subgroup21': ['student211', 'student212', 'student213'],
//         'subgroup22': ['student221', 'student222', 'student223'],
//     },
//     'group3': {
//         'subgroup31': ['student311', 'student312', 'student313'],
//         'subgroup32': ['student321', 'student322', 'student323'],
//     },
// };

// function addStudent(gr, subgr, stud) {
//     if (students[gr] === undefined) {
//         students[gr] = {};

//         if (students[gr][subgr] === undefined) {
//             students[gr][subgr] = [];
//         }
//     }
//     students[gr][subgr].push(stud);
// }

// addStudent('group5', 'subrdoup55', 'pupkin');
// console.log(students)

// Дана вот такая структура для хранения списка дел за года, месяцы и дни:

// let affairs = {
// 	2018: {
// 		11: {
// 			29: ['дело111', 'дело112', 'дело113'],
// 			30: ['дело121', 'дело122', 'дело123'],
// 		},
// 		12: {
// 			30: ['дело211', 'дело212', 'дело213'],
// 			31: ['дело221', 'дело222', 'дело223'],
// 		},
// 	},
// 	2019: {
// 		12: {
// 			29: ['дело311', 'дело312', 'дело313'],
// 			30: ['дело321', 'дело322', 'дело323'],
// 			31: ['дело331', 'дело332', 'дело333'],
// 		}
// 	},
// }
// Сделайте функцию addAffair, которая будет добавлять новое дело в заданную дату. Пусть функция первым параметром принимает год, вторым - месяц, третьим - день, а четвертым - дело.

// let affairs = {
//     2018: {
//         11: {
//             29: ['дело111', 'дело112', 'дело113'],
//             30: ['дело121', 'дело122', 'дело123'],
//         },
//         12: {
//             30: ['дело211', 'дело212', 'дело213'],
//             31: ['дело221', 'дело222', 'дело223'],
//         },
//     },
//     2019: {
//         12: {
//             29: ['дело311', 'дело312', 'дело313'],
//             30: ['дело321', 'дело322', 'дело323'],
//             31: ['дело331', 'дело332', 'дело333'],
//         }
//     },
// }



// function addAffair(year, month, day, affair) {
//     if (affairs[year] === undefined) {
//         affairs[year] = {};
//         if (affairs[year][month] === undefined) {
//             affairs[year][month] = {};
//             if (affairs[year][month][day] === undefined) {
//                 affairs[year][month][day] = [];
//             }
//         }
//     }
//     affairs[year][month][day].push(affair);
// }

// addAffair(2020, 6, 6, 'delo33');

// console.log(affairs)
// console.log(affairs)

// Практика на многомерные массивы и объе��������������������������ты в JavaScript

// Задача 

// Дан такой объект:

// let data = {
// 	2018: {
// 		11: {
// 			29: [1, 2, 3],
// 			30: [4, 5],
// 		},
// 		12: {
// 			30: [6, 7],
// 			31: [8, 9],
// 		},
// 	},
// 	2019: {
// 		12: {
// 			29: [10, 11],
// 			30: [12, 13],
// 			31: [14, 15],
// 		}
// 	},
// }
// Запишите все элементы этого объекта в какой-нибудь массив, вот так:

// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

// let data = {
//     2018: {
//         11: {
//             29: [1, 2, 3],
//             30: [4, 5],
//         },
//         12: {
//             30: [6, 7],
//             31: [8, 9],
//         },
//     },
//     2019: {
//         12: {
//             29: [10, 11],
//             30: [12, 13],
//             31: [14, 15],
//         }
//     },
// }
// let newArray = []
// for (let key in data) {
//     for (let sub_key in data[key]) {
//         for (let sub_sub_key in data[key][sub_key]) {
//             for (let elem of data[key][sub_key][sub_sub_key]) {
//                 newArray.push(elem);
//                 console.log(newArray);
//             }
//         }
//     }
// }

// Дан массив:

// let affairs = [
// 	{
// 		date:  '2019-12-29'
// 		event: 'name1'
// 	},
// 	{
// 		date:  '2019-12-31'
// 		event: 'name2'
// 	},
// 	{
// 		date:  '2019-12-29'
// 		event: 'name3'
// 	},
// 	{
// 		date:  '2019-12-30'
// 		event: 'name4'
// 	},
// 	{
// 		date:  '2019-12-29'
// 		event: 'name5'
// 	},
// 	{
// 		date:  '2019-12-31'
// 		event: 'name6'
// 	},
// 	{
// 		date:  '2019-12-29'
// 		event: 'name7'
// 	},
// 	{
// 		date:  '2019-12-30'
// 		event: 'name8'
// 	},
// 	{
// 		date:  '2019-12-30'
// 		event: 'name9'
// 	},
// ]
// Получите из этого массива уникальные даты, то есть вот так:

// ['2019-12-29', '2019-12-30', '2019-12-31']

// let affairs = [{
//         'date': '2019-12-29',
//         'event': 'name1'
//     },
//     {
//         'date': '2019-12-31',
//         'event': 'name2'
//     },
//     {
//         'date': '2019-12-29',
//         'event': 'name3'
//     },
//     {
//         'date': '2019-12-30',
//         'event': 'name4'
//     },
//     {
//         'date': '2019-12-29',
//         'event': 'name5'
//     },
//     {
//         'date': '2019-12-31',
//         'event': 'name6'
//     },
//     {
//         'date': '2019-12-29',
//         'event': 'name7'
//     },
//     {
//         'date': '2019-12-30',
//         'event': 'name8'
//     },
//     {
//         'date': '2019-12-30',
//         'event': 'name9'
//     },
// ]

// let arr = [];
// for (let elem of affairs) {
//     if (elem['event'] == 'name1' || elem['event'] == 'name4' || elem['event'] == 'name6') {
//         arr.push(elem['date']);
//     }
// }
// console.log(arr);

// Дан такой массив с юзерами:

// let users = [
// 	{
// 		name: 'name1',
// 		age: 31,
// 		active: true,
// 	},
// 	{
// 		name: 'name2',
// 		age: 32,
// 		active: false,
// 	},
// 	{
// 		name: 'name3',
// 		age: 33,
// 		active: true,
// 	},
// 	{
// 		name: 'name4',
// 		age: 34,
// 		active: false,
// 	},
// 	{
// 		name: 'name5',
// 		age: 35,
// 		active: true,
// 	},
// ];
// Выведите на экран тех юзеров, значение ключа active для которых равно true.

// let users = [{
//         'name': 'name1',
//         'age': 31,
//         'active': true,
//     },
//     {
//         'name': 'name2',
//         'age': 32,
//         'active': false,
//     },
//     {
//         'name': 'name3',
//         'age': 33,
//         'active': true,
//     },
//     {
//         'name': 'name4',
//         'age': 34,
//         'active': false,
//     },
//     {
//         'name': 'name5',
//         'age': 35,
//         'active': true,
//     },
// ];

// for (let elem of users) {
//     if (elem['active'] == 1) {
//         console.log(elem);
//     }
// }

// Даны города и их страны следующей структуре:

// let data = [
// 	{
// 		country: 'Россия',
// 		city:    'Москва',
// 	},
// 	{
// 		country: 'Беларусь',
// 		city:    'Минск',
// 	},
// 	{
// 		country: 'Россия',
// 		city:    'Питер',
// 	},
// 	{
// 		country: 'Россия',
// 		city:    'Владивосток',
// 	},
// 	{
// 		country: 'Украина',
// 		city:    'Львов',
// 	},
// 	{
// 		country: 'Беларусь',
// 		city:    'Могилев',
// 	},
// 	{
// 		country: 'Украина',
// 		city:    'Киев',
// 	},
// ];
// Подсчитайте количество стран.

// let data = [{
//         country: 'Россия',
//         city: 'Москва',
//     },
//     {
//         country: 'Беларусь',
//         city: 'Минск',
//     },
//     {
//         country: 'Россия',
//         city: 'Питер',
//     },
//     {
//         country: 'Россия',
//         city: 'Владивосток',
//     },
//     {
//         country: 'Украина',
//         city: 'Львов',
//     },
//     {
//         country: 'Беларусь',
//         city: 'Могилев',
//     },
//     {
//         country: 'Украина',
//         city: 'Киев',
//     },
// ];

// arr = [];
// obj = {};
// arr1 = [];
// for (let elem of data) {
//     arr.push(elem["country"]);
// }
// for (let elem1 of arr) {
//     if (obj[elem1] === undefined) {
//         obj[elem1]++
//     }
// }
// for (let key in obj) {
//     arr1.push(key);
// }
// console.log(`Всего стран: ${arr1.length}`);

// Дан такой список дел за определенную дату:

// let affairs = {
// 	'2019-12-31': ['массив дел'],
// 	'2018-11-29': ['массив дел'],
// 	'2018-11-30': ['массив дел'],
// 	'2018-12-27': ['массив дел'],
// 	'2019-12-29': ['массив дел'],
// 	'2019-12-30': ['массив дел'],
// 	'2018-12-30': ['массив дел'],
// 	'2018-12-31': ['массив дел'],
// }
// Выведите на экран все дела за 2018 год.

// Выведите на экран все дела за 12 месяц 2018 года.

// let affairs = {
// 	'2019-12-31': ['массив дел'],
// 	'2018-11-29': ['массив дел'],
// 	'2018-11-30': ['массив дел'],
// 	'2018-12-27': ['массив дел'],
// 	'2019-12-29': ['массив дел'],
// 	'2019-12-30': ['массив дел'],
// 	'2018-12-30': ['массив дел'],
// 	'2018-12-31': ['массив дел'],
// }

// for (let elem in affairs){
//     if(elem[0]=='2' && elem[1]=='0' && elem[2]=='1' && elem[3]=='8'){
//         console.log(elem);
//     }
// }

// for (let elem in affairs){
//     if(elem[0]=='2' && elem[1]=='0' && elem[2]=='1' && elem[3]=='8' && elem[5]=='1'&&elem[6]=='2'){
//         console.log(elem);
//     }
// }    

// Дан такой массив с юзерами:

//     let users = [{
//             name: 'name1',
//             active: true,
//         },
//         {
//             name: 'name2',
//             active: false,
//         },
//         {
//             name: 'name3',
//             active: true,
//         },
//         {
//             name: 'name4',
//             active: false,
//         },
//         {
//             name: 'name5',
//             active: true,
//         },
//     ];
// Сделайте две функции, которые будут менять значение поля active: первая функция пусть меняет на true, а вторая - на false.

// Пусть наши функции параметрами принимают данный массив и номер юзера, над которым следует произвести изменения.

// Пусть функции возвращают измененный массив.

// let users = [{
//         name: 'name1',
//         active: true,
//     },
//     {
//         name: 'name2',
//         active: false,
//     },
//     {
//         name: 'name3',
//         active: true,
//     },
//     {
//         name: 'name4',
//         active: false,
//     },
//     {
//         name: 'name5',
//         active: true,
//     },
// ];

// function changeKeyActiveFalse(arr, numUser) {

//     if (arr[numUser] === undefined) {
//         return 'No such user';
//     }
//     if (arr[numUser]['active'] == true) {
//         arr[numUser]['active'] = false;
//     }
//     return arr;
// }


// console.log(changeKeyActiveFalse(users, 1));

// function changeKeyActiveTrue(arr, numUser) {

//     if (arr[numUser] === undefined) {
//         return 'No such user';
//     }
//     if (arr[numUser]['active'] == false) {
//         arr[numUser]['active'] = true;
//     }
//     return arr;
// }
// console.log(changeKeyActiveTrue(users, 10));

// Конвертация многомерных структур в JavaScript

// Дан список городов и их стран, хранящийся в следующей структуре:

// let data = [
// 	{
// 		country: 'Россия',
// 		city:    'Москва',
// 	},
// 	{
// 		country: 'Беларусь',
// 		city:    'Минск',
// 	},
// 	{
// 		country: 'Россия',
// 		city:    'Питер',
// 	},
// 	{
// 		country: 'Россия',
// 		city:    'Владивосток',
// 	},
// 	{
// 		country: 'Украина',
// 		city:    'Львов',
// 	},
// 	{
// 		country: 'Беларусь',
// 		city:    'Могилев',
// 	},
// 	{
// 		country: 'Украина',
// 		city:    'Киев',
// 	},
// ]
// Напишите код, которой переделает структуру данных вот в такую:

// {
// 	'Россия': [
// 		'Москва', 'Питер', 'Владивосток',
// 	],
// 	'Беларусь': [
// 		'Минск', 'Могилев'
// 	],
// 	'Украина': [
// 		'Киев', 'Львов'
// 	],
// }

// let data = [{
//         country: 'Россия',
//         city: 'Москва',
//     },
//     {
//         country: 'Беларусь',
//         city: 'Минск',
//     },
//     {
//         country: 'Россия',
//         city: 'Питер',
//     },
//     {
//         country: 'Россия',
//         city: 'Владивосток',
//     },
//     {
//         country: 'Украина',
//         city: 'Львов',
//     },
//     {
//         country: 'Беларусь',
//         city: 'Могилев',
//     },
//     {
//         country: 'Украина',
//         city: 'Киев',
//     },
// ]

// let result = {}
// for (elem of data) {
//     if(result[elem.country] == undefined){
//         result[elem.country]=[elem.city]
//     }
//     else{result[elem.country].push(elem.city)}
// }
// console.log(result)

// same solve 
// let obj = {};
// obj['Россия'] = [];
// obj['Украина'] = [];
// obj['Беларусь'] = [];
// for (let elem of data) {
//     if (elem['country'] == 'Россия') {
//         obj['Россия'].push(elem['city'])
//     }
//     if (elem['country'] == 'Украина') {
//         obj['Украина'].push(elem['city'])
//     }
//     if (elem['country'] == 'Беларусь') {
//         obj['Беларусь'].push(elem['city'])
//     }
// }
// console.log(obj);

// Дан список событий за определенные даты, хранящийся в следующей структуре:

// let events = [
// 	{
// 		date:  '2019-12-29'
// 		event: 'name1'
// 	},
// 	{
// 		date:  '2019-12-31'
// 		event: 'name2'
// 	},
// 	{
// 		date:  '2019-12-29'
// 		event: 'name3'
// 	},
// 	{
// 		date:  '2019-12-30'
// 		event: 'name4'
// 	},
// 	{
// 		date:  '2019-12-29'
// 		event: 'name5'
// 	},
// 	{
// 		date:  '2019-12-31'
// 		event: 'name6'
// 	},
// 	{
// 		date:  '2019-12-29'
// 		event: 'name7'
// 	},
// 	{
// 		date:  '2019-12-30'
// 		event: 'name8'
// 	},
// 	{
// 		date:  '2019-12-30'
// 		event: 'name9'
// 	},
// ]
// Напишите код, которой переделает структуру данных вот в такую:

// {
// 	'2019-12-29': ['name1', 'name3', 'name5', 'name7'],
// 	'2019-12-30': ['name4', 'name8', 'name9'],
// 	'2019-12-31': ['name2', 'name6'],
// }

// let events = [{
//         date: '2019-12-29',
//         event: 'name1'
//     },
//     {
//         date: '2019-12-31',
//         event: 'name2'
//     },
//     {
//         date: '2019-12-29',
//         event: 'name3'
//     },
//     {
//         date: '2019-12-30',
//         event: 'name4'
//     },
//     {
//         date: '2019-12-29',
//         event: 'name5'
//     },
//     {
//         date: '2019-12-31',
//         event: 'name6'
//     },
//     {
//         date: '2019-12-29',
//         event: 'name7'
//     },
//     {
//         date: '2019-12-30',
//         event: 'name8'
//     },
//     {
//         date: '2019-12-30',
//         event: 'name9'
//     },
// ]

// let result = {};

// for (let elem of events) {
//     if (result[elem.date] == undefined) {
//         result[elem.date] = [elem.event];
//     } else {
//         result[elem.date].push(elem.event)
//     }
// }
// console.log(result)

// Дан список событий за определенные даты, хранящийся в следующей структуре:

//     let events = {
//         '2019-12-29': ['name1', 'name3', 'name5', 'name7'],
//         '2019-12-30': ['name4', 'name8', 'name9'],
//         '2019-12-31': ['name2', 'name6'],
//     }
// Напишите код, которой переделает структуру данных вот в такую:

//     let events = [{
//             date: '2019-12-29'
//             event: 'name1'
//         },
//         {
//             date: '2019-12-31'
//             event: 'name2'
//         },
//         {
//             date: '2019-12-29'
//             event: 'name3'
//         },
//         {
//             date: '2019-12-30'
//             event: 'name4'
//         },
//         {
//             date: '2019-12-29'
//             event: 'name5'
//         },
//         {
//             date: '2019-12-31'
//             event: 'name6'
//         },
//         {
//             date: '2019-12-29'
//             event: 'name7'
//         },
//         {
//             date: '2019-12-30'
//             event: 'name8'
//         },
//         {
//             date: '2019-12-30'
//             event: 'name9'
//         },
//     ]

// let events = {
//     '2019-12-29': ['name1', 'name3', 'name5', 'name7'],
//     '2019-12-30': ['name4', 'name8', 'name9'],
//     '2019-12-31': ['name2', 'name6'],
// }

// let result = [];

// for(let key in events){
//     for(let elem of events[key]){
//         result.push({date: key, event: elem});
//     }
// }
// console.log(result)

// Даты 

// Математические методы в JavaScript

// Работа со степенью и корнем

// Возведите 2 в 10 степень.
// console.log(Math.pow(2,10));

// Найдите квадратный корень из 245

// console.log(Math.sqrt(245))

// Дан массив с элементами 4, 2, 5, 19, 13, 0, 10. Найдите квадратный корень из суммы кубов его элементов. Для решения воспользуйтесь циклом for.

// let arr = [4, 2, 5, 19, 13, 0, 10];

// let result = 0;
// for (let elem of arr) {
//     result += Math.pow(elem, 3);
// }
// console.log(Math.sqrt(result))

// Работа с функциями округления

// Найдите квадратный корень из 379. Результат округлите до целых, до десятых, до сотых.

// let result = Math.sqrt(379)
// console.log(result.toFixed())
// console.log(result.toFixed(1))
// console.log(result.toFixed(2))

// Найдите квадратный корень из 587. Округлите результат в большую и меньшую стороны, запишите результаты округления в объект с ключами 'floor' и 'ceil'.

// let result = Math.sqrt(587);
// console.log(Math.floor(result));
// console.log(Math.ceil(result));

// Нахождение максимального и минимального числа

// Даны числа 4, -2, 5, 19, -130, 0, 10. Найдите минимальное и максимальное число.

// console.log(Math.max(4, -2, 5, 19, -130, 0, 10))
// console.log(Math.min(4, -2, 5, 19, -130, 0, 10))

// Работа с рандомом

// Выведите на экран случайное целое число от 1 до 100.

//  function getRandomInt(min, max) {
//     return Math.floor(Math.random() * (max - min + 1)) + min;
// }

// console.log(getRandomInt(1, 100));

// Заполните массив 10-ю случайными целыми числами.

// let arrResult = [];
// for(let i=0; i<10; i++){
//     arrResult.push((Math.random()*(100-1+1)+1).toFixed());
// }
// console.log(arrResult)

// Работа с модулем

// Даны переменные a и b. Найдите найдите модуль разности a и b. Проверьте работу скрипта самостоятельно для различных a и b.

// let b = 5;
// let a = -7;
// console.log(Math.abs(a-b));

// Строковые методы JavaScript

// Работа с регистром символов

// Дана строка 'js'. Сделайте из нее строку 'JS'.

// let string = 'js'
// console.log(string.toUpperCase())

// Дана строка 'JS'. Сделайте из нее строку 'js'.

// let string = 'JS'
// console.log(string.toLowerCase())

// Работа с substr, substring, slice

// Дана строка 'я учу javascript!'. Вырежьте из нее слово 'учу' и слово 'javascript' тремя разными способами (через substr, substring, slice).

// let string = 'я учу javascript!';
// console.log(string.substr(2,3));
// console.log(string.substring(2,5));
// console.log(string.slice(2,5))

// Работа с indexOf

// Дана строка 'я учу javascript!'. Найдите позицию подстроки 'учу'.

// let string = 'я учу javascript!';
// console.log(string.indexOf('учу'))

// Дана строка 'abcde'. Определите позицию буквы 'c' в этой строке.

// let string ='abcde';
// console.log(string.indexOf('c'))

// Дана строка. Проверьте, есть ли в этой строке символ 'a'.

// let string = 'rttcv';
// console.log(string.lastIndexOf('a'))

// Дана строка. Проверьте, начинается ли эта строка с символа 'a'.

// let string ='abcde';
// console.log(string.indexOf('a'))

// Дана строка. Проверьте, заканчивается ли эта строка на символ 'a'.

// let string ='edcba';
// console.log(string.lastIndexOf('a'))

// Дана строка. Проверьте, начинается ли эта строка на http://.

// let string = 'http://code.mu/ru/javascript/book/prime/inbuilt/string/'
// console.log(string.indexOf('http://'))

// Дана строка. Проверьте, заканчивается ли эта строка на .html.

// let string = 'http://code.mu/ru/javascript/book/prime/inbuilt/string/'
// console.log(string.lastIndexOf('.html'))

// Работа с startsWith, endsWith

// Дана строка. Проверьте, начинается ли эта строка на http://.

// let string = 'http://code.mu/ru/javascript/book/prime/inbuilt/string/'
// console.log(string.startsWith('http://'))

// Дана строка. Проверьте, заканчивается ли эта строка на .html.

// let string = 'http://code.mu/ru/javascript/book/prime/inbuilt/string/'
// console.log(string.endsWith('string/'))

// Работа с split

// Дана строка '1-2-3-4-5'. С помощью метода split запишите каждое число этой строки в отдельный элемент массива.

// let string = '1-2-3-4-5';
// console.log(string.split('-'))

// Дана строка '12345'. С помощью метода split запишите каждый символ этой строки в отдельный элемент массива.

// let string = '12345';
// console.log(string.split(''))

// Работа с join

// Дан следующий массив:

// let arr = [1, 2, 3, 4, 5];
// С помощью метода join слейте его в строку '1-2-3-4-5'.

// let arr = [1, 2, 3, 4, 5];
// console.log(arr.join('-'))

// Методы для массивов в JavaScript
// Работа с push, unshift

// Задача 

// Дан массив [1, 2, 3]. Добавьте ему в конец элементы 4, 5, 6.

// let arr = [1, 2, 3];
// arr.push(4, 5, 6)
// console.log(arr)

// Дан массив [1, 2, 3]. Добавьте ему в начало элементы 4, 5, 6.

// let arr = [1, 2, 3];
// arr.unshift(4, 5, 6);
// console.log(arr)

// Работа с shift, pop

// Дан массив ['js', 'css', 'jq']. Выведите на экран первый элемент.

// let arr = ['js', 'css', 'jq'];
// let first = arr.shift();
// console.log(first);

// Дан массив ['js', 'css', 'jq']. Выведите на экран последний элемент.

// let arr = ['js', 'css', 'jq'];
// let last = arr.pop();
// console.log(last)

// Работа с slice

// Дан массив [1, 2, 3, 4, 5]. С помощью метода slice запишите в новый элементы [1, 2, 3].

// let arr = [1, 2, 3, 4, 5];
// let newArr = arr.slice(0, 3);
// console.log(newArr)

// Дан массив [1, 2, 3, 4, 5]. С помощью метода slice запишите в новый элементы [4, 5].

// let arr = [1, 2, 3, 4, 5];
// let newArr = arr.slice(3);
// console.log(newArr)

// Работа с splice

// Дан массив [1, 2, 3, 4, 5]. С помощью метода splice преобразуйте массив в [1, 4, 5].

// let arr = [1, 2, 3, 4, 5];
// arr.splice(1, 2);
// console.log(arr)

// Дан массив [1, 2, 3, 4, 5]. С помощью метода splice запишите в новый массив элементы [2, 3, 4].

// let arr = [1, 2, 3, 4, 5];

// let newArr = arr.splice(1, 3);
// console.log(newArr)

// Дан массив [1, 2, 3, 4, 5]. С помощью метода splice сделайте из него массив [1, 2, 3, 'a', 'b', 'c', 4, 5].

// let arr = [1, 2, 3, 4, 5];
// arr.splice(3, 0, 'a', 'b', 'c')
// console.log(arr)

// Дан массив [1, 2, 3, 4, 5]. С помощью метода splice сделайте из него массив [1, 'a', 'b', 2, 3, 4, 'c', 5, 'e'].

// let arr = [1, 2, 3, 4, 5];
// arr.splice(1, 0, 'a', 'b');
// arr.splice(6, 0, 'c');
// arr.splice(8, 0, 'e');
// console.log(arr)

// Работа с indexOf

// Дан массив с числами. Проверьте, есть ли в этом массиве число 3.

// let arr = [1, 2, 3, 4, 5];
// console.log(arr.indexOf(3))

// Практика на использования изученных методов
// Регистр символов

// Пусть у нас есть некоторая переменная с текстом:

// let str = 'london';
// Преобразуйте последнюю букву строки в верхний регистр.

// let str = 'london';
// let result = str.slice(0, -1) + str.slice(-1).toUpperCase()
// console.log(result)

// Преобразуйте первые 2 буквы строки в верхний регистр.

// let str = 'london';
// let result = str.slice(0, 2).toUpperCase() + str.slice(-4)
// console.log(result)

// Пусть дана строка, у которой первая буква в верхнем регистре, например вот такая:

// let str = 'London';
// Преобразуйте первую букву строки в нижний регистр.
// let str = 'London';

// let result = str.slice(0, 1).toLowerCase() + str.slice(1);
// console.log(result)

// Слова в строке

// Пусть у нас есть некоторая переменная с текстом, состоящим из нескольких слов:

// let str = 'word1 word2 word3';
// Давайте напишем код, который преобразует первую букву каждого слова в верхний регистр.

// let str = 'word1 word2 word3';

// let newStr = str.split(' ');
// for(let i=0; i< newStr.length; i++){
//     newStr[i]= newStr[i].slice(0, 1).toUpperCase() + newStr[i].slice(1);
// }

// let result = newStr.join(' ')
// console.log(result)

// Преобразуйте строку 'var_test_text' в 'VarTestText'.

// Написанный код должен работать для любых строк такого типа (то есть для строк, в которых слова разделены символов подчеркивания).

// let str = 'var_test_text';

// let newArr = str.split('_')
// for (let i =0; i< newArr.length; i++){
//     newArr[i]=newArr[i].slice(0, 1).toUpperCase() + newArr[i].slice(1)
// }
// let result = newArr.join('')
// console.log(result)

// Модифицируйте предыдущую задачу так, чтобы первая буква новой строки была в нижнем регистре.

// let str = 'var_test_text';

// let newArr = str.split('_')
// for (let i =0; i< newArr.length; i++){
//     newArr[i]=newArr[i].slice(0, 1).toLowerCase() + newArr[i].slice(1)
// }
// let result = newArr.join('')
// console.log(result)

// Переворот строки

// Дана строка со словами. Напишите скрипт, который переставит слова в строке в обратном порядке.

// let str = "улыбок тебе дед макар";
// let result = str.split('').reverse().join('');
// console.log(result)


// Основы работы с пользовательскими функциями в JavaScript

// Сделайте функцию, выводящую на экран ваше имя.

// function fun(){
//     console.log("my name");
// }
// fun()

// Сделайте функцию, выводящую на экран сумму чисел от 1 до 100.
// let i = 0;

// function fun() {
//     while (i < 100) {
//         i++;
//         console.log(i)
//     }
// }
// fun()

// Параметры функций в JavaScript

// Сделайте функцию, которая параметром принимает число и выводит на экран куб этого числа.

// function funct(num){
//     console.log(Math.pow(num, 3))
// }
// funct(3)

// Сделайте функцию, которая параметром принимает число и проверяет, положительное это число или отрицательное. В первом случае пусть функция выводит на экран текст '+++', а во втором '---'.

// function funct(num) {
//     if (num > 0) {
//         console.log('+++');

//     } else {
//         console.log('---')
//     }
// }

// funct(-3)

// Несколько параметров

// Сделайте функцию, которая параметрами принимает 3 числа и выводит на экран сумму этих чисел.

// function funct(num1, num2, num3){
//     console.log(num1+ num2 +num3)
// }
// funct(1, 3, 5)

// Параметры-переменные

// Сделайте функцию func, которая параметром будет принимать 3 числа и выводить на экран их сумму.

// Пусть даны 3 переменные с числами:

// let param1 = 1;
// let param2 = 2;
// let param3 = 3;
// С помощью созданной вами функции выведите на экран сумму значений эти переменных.

// let param1 = 1;
// let param2 = 2;
// let param3 = 3;

// function funct(num1, num2, num3) {
//     console.log(num1 + num2 + num3);
// }

// funct(param1, param2, param3)

// Инструкция return в JavaScript

// Сделайте функцию, которая параметром принимает число, а возвращает куб этого числа. С помощью этой функции найдите куб числа 3 и запишите его в переменную result.

// function funct(num){
//     return Math.pow(num, 3)
// }

// let result = funct(3);
// console.log(result)

// Использование функций в выражении

// Сделайте функцию, которая параметром принимает число, а возвращает квадратный корень из этого числа.
// С помощью этой функции найдите корень числа 3, затем найдите корень числа 4. Просуммируйте полученные результаты и выведите их на экран.

// function funct(num){
//     return Math.sqrt(num)
// }

// let result = funct(3)+funct(4)
// console.log(result)

// Функции в функциях

// Пусть у вас есть функция, возвращающая квадратный корень из числа, и функция, округляющая дробь до трех знаков в дробной части:

// function sqrt(num) {
// 	return Math.sqrt(num);
// }

// function round(num) {
// 	return num.toFixed(3);
// }
// С помощью этих функций найдите квадратный корень из числа 2 и округлите его до трех знаков в дробной части.

// function sqrt(num) {
// 	return Math.sqrt(num);
// }

// function round(num) {
//     return num.toFixed(3);
// }

// let result = round(sqrt(2))
// console.log(result)

// Пусть у вас есть функция, возвращающая квадратный корень из числа, и функция, возвращающая сумму трех чисел:

// function sqrt(num) {
// 	return Math.sqrt(num);
// }

// function sum(num1, num2, num3) {
// 	return num1 + num2 + num3;
// }
// С помощью этих функций найдите сумму корней чисел 2, 3 и 4 и запишите ее в переменную result.

// function sqrt(num) {
// 	return Math.sqrt(num);
// }

// function sum(num1, num2, num3) {
//     return num1 + num2 + num3;
// }
// let result = sum(sqrt(2), sqrt(3), sqrt(4))
// console.log(result)

// Пусть у вас есть функция, округляющая дробь до трех знаков в дробной части:

// function round(num) {
// 	return num.toFixed(3);
// }
// С помощью этой функции модифицируйте предыдущую задачу так, чтобы в переменную result записывалась дробь, округленная до 3-х знаков в дробной части.

// function sqrt(num) {
// 	return Math.sqrt(num);
// }

// function sum(num1, num2, num3) {
//     return num1 + num2 + num3;
// }

// function round(num) {
// 	return num.toFixed(3);
// }
// let result = round(sum(sqrt(2), sqrt(3), sqrt(4)))
// console.log(result)

// Применение return в цикле

// Напишите функцию, которая параметром будет принимать число и делить его на 2 столько раз, пока результат не станет меньше 10. Пусть функция возвращает количество итераций, которое потребовалось для достижения результата.

// function numbers(num) {
//     for (var num, i = 0; num > 10; num = num / 2, i++);
//     return i;
// }
// console.log(numbers(200))

// Примеры на создание функций в JavaScript

// Напишите функцию, которая будет находить сумму квадратов элементов массива.

// let arr = [1, 2, 3, 4, 5];

// function getSum(arr){
//     let sum =0;
//     for(let elem of arr){
//         sum+= elem* elem;
//     }
//     return sum
// }

// console.log(getSum(arr))

// Сделайте функцию getDigitsSum (digit - это цифра), которая параметром будет принимать целое число и возвращать сумму его цифр.

// function getDigitsSum(num) {
//     let sum = 0;
//     let str = String(num);
//     for (let i = 0; i < str.length; i++) {
//         sum += Number(str[i]);
//     }
//     return sum;
// }

// console.log(getDigitsSum(980))

// Реализуйте функцию getDivisors, которая параметром будет принимать число и возвращать массив его делителей, то есть чисел, на которое делится наше число. К примеру, если мы передадим число 24 - мы должны получить массив [1, 2, 3, 4, 6, 12, 24].

// function fetDivisons(num){
//     let arr = [];
//     for(let i=0; i <= num; i++){
//         if(num % i == 0){
//             arr.push(i);
//         }
//     }
//     return arr;
// }
// console.log( fetDivisons(125))

// Сделайте функцию reverseStr, которая параметром будет принимать строку и переворачивать ее символы в обратном порядке. Решите задачу без цикла, используя комбинацию стандартных функций JavaScript.

// function reverseStr(str){
//     str = str.split('').reverse().join('');
//     return str;
// }

// console.log(reverseStr('str'))

// Сделайте функцию delElem, которая параметрами будет принимать значение и массив и удалять из массива все элементы с таким значением.


// function delElements(elem, arr){
//     let newArr = [];
//     for(let i=0; i< arr.length; i++){
//         if(arr[i] != elem){
//             newArr.push(arr[i])
//         }
//     }
//     return newArr
// }

// let elem1 = 1;
// let arr1 = [1, 4, -1, 5, 2, 1]

// console.log(delElements(elem1, arr1))



// Сделайте функцию, заполняющую массив целыми числами от 1 до заданного.

// Пример работы такой функции:

// console.log(func(5)); // выведет [1, 2, 3, 4, 5]

// function func(num){
//     let newArr = [];
//     for(let i=1; i<= num; i++){
//         if(i <= num ){
//             newArr.push(i)
//         }
//     }
//     return newArr
// }

// console.log( func(30))

// Сделайте функцию, заполняющую массив целыми числами от начального до конечного заданных чисел.

// Пример работы такой функции:

// console.log(func(3, 7)); // выведет [3, 4, 5, 6, 7]

// function func(num1, num2){
//     let newArr = [];
//     for(let i=0; i<=num2; i++){
//         if(i >= num1 && i<=num2){
//             newArr.push(i);
//         }
//     }
//     return newArr;
// }

// console.log(func(5, 15))

// Флаги в функциях JavaScript

// Сделайте функцию, которая параметром будет принимать массив с числами, и проверять, что все элементы в этом массиве являются четными числами.

// function funct(arr) {
//     for (elem of arr) {
//         if (elem % 2 !== 0) {
//             return false;
//         }

//     }
//     return true;
// }

// console.log(funct([2, 2, 4, 6]))

// Сделайте функцию, которая параметром будет принимать число и проверять, что все цифры это числа являются нечетными.

// function funct(num){
//     let newArr = String(num).split('');
//     for(elem of newArr){
//         if(elem % 2 !== 0){
//             return true;
//         }
//     }
//     return false;
// }

// console.log(funct(464))

// Сделайте функцию, которая параметром будет принимать массив и проверять, есть ли в этом массиве два одинаковых элемента подряд.

// function func(arr){
//     for(let i=0; i< arr.length; i++){
//         if(arr[i+1] == arr[i]){
//             return true;
//         }
//     }
//     return false;
// }



// console.log(func([1, 3, 3, 4, 6]))

// Логические операторы без if в функциях JavaScript

// Дана следующая функция:

// function func(a, b) {
// 	if (a == b) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// }
// Перепишите ее код в сокращенной форме согласно изученной теории.

// function func(a, b){
//     return a == b;
// }

// console.log( func(3,3))

// Дана следующая функция:

// function func(a, b) {
// 	if (a != b) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// }
// Перепишите ее код в сокращенной форме согласно изученной теории.

// function func(a, b) {
//     return a != b;
// }

// console.log(func(3, 3))

// Дана следующая функция:

// function func(a, b) {
// 	if (a + b >= 10) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// }
// Перепишите ее код в сокращенной форме согласно изученной теории.

// function func(a, b){
//     return (a+b >=10);
// }

// console.log( func(5, 5))

// Дана следующая функция:

// function func(num) {
// 	if (num >= 0) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// }
// Перепишите ее код в сокращенной форме согласно изученной теории.

// function func(num){
//     return num >=0;
// }

// console.log(func(0))

// Правильное использование функций JavaScript

// Дана функция, проверяющая числа на простоту:

// function isPrime(num) {
// 	for (let i = 2; i < num; i++) {
// 		if (num % i == 0) {
// 			return false;
// 		}
// 	}

// 	return true;
// }
// С помощью приведенной функции найдите все простые числа в интервале от 1 до 100.

// function isPrime(num) {
//     for (let i = 2; i < num; i++) {
//         if (num % i == 0) {
//             return false;
//         }
//     }

//     return true;
// }

// for (let i = 1; i <= 100; i++) {
//     if (isPrime(i)) {
//         console.log(i);
//     }
// }

// Дана функция getDigitsSum, которая параметром принимает целое число и возвращает сумму его цифр:

// function getDigitsSum(num) {
// 	let sum = 0;
// 	let digits = String(num).split('');

// 	for (let digit of digits) {
// 		sum += Number(digit);
// 	}

// 	return sum;
// }
// С помощью приведенной функции getDigitsSum найдите все года от 1 до 2030, сумма цифр которых равна 13.

// function getDigitsSum(num) {
// 	let sum = 0;
// 	let digits = String(num).split('');

// 	for (let digit of digits) {
// 		sum += Number(digit);
// 	}

// 	return sum;
// }

// for(let i =1; i<= 2030; i++){
//     if(getDigitsSum(i) ==13){
//         console.log(i);
//     }
// }

// Пусть дан какой-то массив с числами, например, такой:

// [123, 456, 789]
// Давайте сделаем так, чтобы цифры в каждом элементе массива были в обратном порядке. То есть из нашего массива сделаем следующий:

// [321, 654, 987]
// Некий программист уже написал код, реализующий описанную задачу:

// let nums = [123, 456, 789];

// let result = [];
// for (let num of nums) {
// 	result.push(String(num).split('').reverse().join(''));
// }

// console.log(result); // выведет [321, 654, 987]
// Переделайте приведенный код так, чтобы переворот числа выполняла отдельная функция.

// function func(num){
//     return String(num).split('').reverse().join('');
// }

// let nums = [123, 456, 789];

// let result = [];
// for (let num of nums) {
// 	result.push(func(num));
// }

// console.log( result)

// Переделайте код так, чтобы он был более удачным.
// let num1 = 234;
// let num2 = 531;

// function sum1(num1) {
//     let digits1 = String(num1).split('');
//     let digitsSum1 = 0;
//     for (let digit1 of digits1) {
//         digitsSum1 += Number(digit1);
//     }
//     return digitsSum1;
// }

// function sum2(num2) {
//     let digits2 = String(num2).split('');
//     let digitsSum2 = 0;
//     for (let digit2 of digits2) {
//         digitsSum2 += Number(digit2);
//     }
//     return digitsSum2;
// }

// if (sum1(num1) == sum2(num2)) {
// 	console.log('суммы цифр совпадают');
// } else {
// 	console.log('суммы цифр не совпадают');
// }

// Дан массив с числами. Необходимо перебрать этот массив с числами и вывести в консоль нетривиальные делители этих чисел (то есть исключая число 1 и само число).

// let nums = [12, 24, 35, 14];

// for (let num of nums) {
// 	console.log(num + ': ' + getDivisors(num).join(', '));
// }

// function getDivisors(num) {
// 	let result = [];

// 	for (let i = 2; i < num; i++) {
// 		if (num % i == 0) {
// 			result.push(i);
// 		}
// 	}

// 	return result;
// }


// Комбинация вспомогательных функций JavaScript

// Дана функция getSum, находящая сумму элементов переданного массива:

// function getSum(arr) {
// 	let sum = 0;

// 	for (let elem of arr) {
// 		sum += Number(elem);
// 	}

// 	return sum;
// }
// Дана функция getDigits, возвращающая массив цифр числа:

// function getDigits(num) {
// 	return String(num).split('');
// }
// Используя комбинацию приведенных функций найдите сумму цифр числа 12345.

// function getSum(arr) {
// 	let sum = 0;

// 	for (let elem of arr) {
// 		sum += Number(elem);
// 	}

// 	return sum;
// }

// function getDigits(num) {
// 	return String(num).split('');
// }

// console.log(getSum(getDigits(12345)))

// Дано число. Нужно найти его делители (без 1 и самого числа), а затем найти среднее арифметическое (сумма делить на количество) делителей числа и вывести результат на экран.

// Некий программист уже написал решение задачи:



// Нахождение среднего арифметического:
// function getAvg(arr) {
// 	let sum = 0;

// 	for (let elem of arr) {
// 		sum += elem;
// 	}

// 	return sum / arr.length;
// }


// // Нахождение массива делителей числа:
// function getDivisors(num) {
// 	let result = [];

// 	for (let i = 2; i < num; i++) {
// 		if (num % i == 0) {
// 			result.push(i);
// 		}
//     }
//     return result
// }

// console.log( getAvg(getDivisors(24)) );
// Программист не тестировал отдельно работу своих функций, а написал весь код сразу и затем запустил его. При запуске оказалось, что код работает неверно.

// Найдите и исправьте ошибки программиста. Потестируйте отдельно работу всех функций, чтобы убедиться, что они работают корректно после ваших правок. После того, как вы убедитесь в корректности работы функций - проверьте полный код решения задачи.


// Вспомогательные функции внутри других функций в JavaScript


// Пусть у нас дан массив с числами. Решим следующую задачу: запишем в новый массив только те элементы, сумма цифр в которых от 1 до 9.
// let arr = [12, 19, 28, 13, 14, 345];
// let result = [];

// function inRange(num) {
//     let sum = getSum(getDigits(num));
//     return sum >= 1 && sum <= 9;
// }


// function getSum(arr) {
//     let sum = 0;
//     for (let elem of arr) {
//         sum += Number(elem);
//     }
//     return sum;
// }

// function getDigits(num) {
//     return String(num).split('')
// }

// for (let elem of arr){
//     if(inRange(elem)){
//         result.push(elem);
//     }
// }

// console.log(result)

// Дружественные числа на JavaScript

// Реализуйте функцию getOwnDivisors. Потестируйте ее работу. которая параметром будет принимать число и возвращать массив собственных делителей этого числа:

// function getOwnDivisors(num) {
//     let arr = [];
//     for (let i = 1; i < num; i++) {
//         if (num % i == 0) {
//             arr.push(i);
//         }
//     }
//     return arr;
// }

// console.log(getOwnDivisors(30))

// Реализуйте функцию getSum. Потестируйте ее работу. которая параметром будет принимать массив и возвращать сумму элементов этого массива:

// function getSum(arr) {
//     let sum = 0
//     for (let elem of arr) {
//         sum += elem;
//     }
//     return sum;
// }

// console.log(getSum([1, 2, 3]))

// Проверьте работу функции isFreindly.

// function isFreindly(num1, num2) {
// 	let sum1 = getSum(getOwnDivisors(num1));
// 	let sum2 = getSum(getOwnDivisors(num2));

// 	if (sum1 == num2 && sum2 == num1) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// }

// function getOwnDivisors(num) {
//     let arr = [];
//     for (let i = 1; i < num; i++) {
//         if (num % i == 0) {
//             arr.push(i);
//         }
//     }
//     return arr;
// }

// function getSum(arr) {
//     let sum = 0
//     for (let elem of arr) {
//         sum += elem;
//     }
//     return sum;
// }

// console.log(isFreindly(220, 284));

// Сделайте функцию getFreindly, которая будет находить пары дружественных чисел в заданном промежутке и возвращать их в виде двухмерного массива вида [ [220, 284], [1184, 1210], [2620, 2924] ]. С помощью созданной функции найдите все пары дружественных чисел на промежутке от 1 до 9000.


// function getOwnDivisors(num) {
//     let arr = [];
//     for (let i = 1; i < num; i++) {
//         if (num % i == 0) {
//             arr.push(i);
//         }
//     }
//     return arr;
// }

// function getSum(num) {
//     let sum = 0;
//     for (let elem of num) {
//         sum += elem;
//     }
//     return sum;
// }

// function getFreindly(num) {
//     let arr = [];
//     let min = 1;
//     let max = 9000;
//     for (; min < max; min++) {
//         let sum = getSum(getOwnDivisors(min));
//         let compare = getSum(getOwnDivisors(sum));
//         if (min == compare && min != sum) {
//             let tempArr = [];
//             tempArr.push(min, sum);
//             arr.push(tempArr);
//         }
//     }
//     for (let i = 0; i < arr.length - 1; i++) {
//         if (arr[i][0] == arr[i + 1].reverse()[0]) {
//             arr.splice(i, 1);
//         }
//     }
//     return arr;
// }
// console.log(getFreindly());

// Совершенное число - целое число, равное сумме всех своих собственных делителей (то есть всех положительных делителей, отличных от самого числа). Сделайте функцию getPerfect, которая будет находить совершенные числа в заданном диапазоне. Проверьте работу функции в промежутке от 1 до 1000.

// function ownDivisors(num) {
//     let divArr = [];
//     for (let i = 0; i < num; i++) {
//         if (num % i == 0) {
//             divArr.push(i)
//         }
//     }
//     return divArr;
// }

// function sumOwnDivisors(divArr) {
//     let sum = 0;
//     for (let elem of divArr) {
//         sum += elem;
//     }
//     return sum;
// }

// function getPerfect(num1, num2){
//     for(let i=num1; i < num2; i++){
//         if( i == sumOwnDivisors(ownDivisors(i))){
//             console.log(i);
//         }
//     }
// }

// getPerfect(1, 9000)


// Сделайте функцию getSimpleDivisors, которая будет принимать параметром целое число и находить все делители этого числа, являющиеся простыми числами.
// простые числа
// function isPrime(num) {
//     for (let i = 2; i < num; i++) {
//         if (num % i == 0) {
//             return false;
//         }
//     }

//     return true;
// }
// делители числа
// function getOwnDivisors(num) {
//     let divArr = [];
//     for (let i = 0; i < num; i++) {
//         if (num % i == 0) {
//             divArr.push(i)
//         }
//     }
//     return divArr;
// }
// функция находщая делители - простые чисоа
// function getSimpleDivisors(num){
//     let result = [];
//     let arr = getOwnDivisors(num);
//     for(let elem of arr){
//         if(isPrime(elem)){
//             result.push(elem)
//         }
//     }
//     return result;
// }

// console.log( getSimpleDivisors(26))


// Пересечение массивов на JavaScript

// нужно перебрать циклом элементы одного массива и в каждой итерации проверять, есть ли такой элемент во втором массиве.


// function getInt(arr1, arr2) {
//     let result = [];

//     for (let elem of arr1) {
//         if (inArray(elem, arr2)) {
//             result.push(elem);
//         }
//     }

//     return result;
// }
// Первая мысль, которая у меня возникает, следующая: мне нужна функция, которая параметром принимает элемент, а вторым - массив, и проверяет, есть ли такой элемент в этом массиве.

// function inArray(elem, arr) {
//     if (arr.indexOf(elem) == -1) {
//         return false;
//     } else return true;
// }

// console.log(getInt([1, 2, 3], [2, 3, 4, 5]));

// Разность массивов на JavaScript

// Пусть у нас даны два массива:

// let arr1 = [1, 2, 3];
// let arr2 = [2, 3, 4, 5];
// Можно заметить, что числа 1, 4 и 5 не присутствуют одновременно в обоих массивах. Такие элементы называются разностью массивов.
// Давайте функцию getDiff, которая будет находить разность двух массивов.

// let arr1 = [1, 2, 3];
// let arr2 = [2, 3, 4, 5];

// function inArray(elem, arr){
//     return arr.indexOf(elem) !== -1;
// }

// function getDiff(arr1, arr2){
//     let result = [];
//     for(let elem of arr1){
//         if(!inArray(elem, arr2)){
//             result.push(elem);
//         }
//     }

//     for(let elem of arr2){
//         if(!inArray(elem, arr1)){
//             result.push(elem);
//         }
//     }
// return result;
// }

// console.log(getDiff([1, 2, 3], [1, 4, 5]))

////////////////////////////////////////////// 2й вариант решения

// function inArray(elem, arr) {
//     return arr.indexOf(elem) !== -1;
// }


// function getFirstDiff(arr1, arr2) {
//     let result = [];
//     for (let elem of arr1) {
//         if (!inArray(elem, arr2)) {
//             result.push(elem)
//         }
//     }
//     return result
// }

// function getDiff(arr1, arr2) {
//     let result = [];
//     result = result.concat(getFirstDiff(arr1, arr2));
//     result = result.concat(getFirstDiff(arr2, arr1));
//     return result;
// }

// console.log(getDiff([1, 2, 3], [1, 4, 5]))



// Наибольший общий делитель на JavaScript


// Реализуйте функцию getGreatestCommonDivisor, которая параметрами будет принимать два числа и возвращать НОД этих двух чисел.
// При решении задачи старайтесь использовать вспомогательные функции, в том числе полученные нами ранее в теоретической части.
// Обязательно тестируйте каждую вспомогательную функцию перед использованием.

// let num1 = 12,
//     num2 = 18


// function getGreatestCommonDivisor(num1, num2){

//     let result =0;
//     ///
// }

// function getDivisors(num){
//     let Divisors = [];
//     for(let i=1; i<num; i++){
//         if(num % i == 0){
//             Divisors.push(i);
//         }
//     }
//     return Divisors;
// }
// // console.log(getDivisors(18))

// function elemInArray(elem, arr){
//     return arr.indexOf(elem) !== -1;
// }

// // console.log( elemInArray(1, [1, 2, 3]))

// function getSameDivisors(arr1, arr2){
//     let sameDivisors = [];
//     for(let elem of arr1){
//         if(elemInArray(elem, arr2)){
//             sameDivisors.push(elem);
//         }
//     }

//     // for(let elem of arr2){
//     //     if(elemInArray(elem, arr1)){
//     //         sameDivisors.push(elem);
//     //     }
//     // }
//     return sameDivisors;
// }
// // console.log(getSameDivisors([ 1, 2, 3, 6, 9 ], [ 2, 3, 4, 5 ]))

// function greatestDivisors(arr){
//     return Math.max.apply(null, arr);
// }

// // console.log( greatestDivisors([1, 2, 9]))

// function getGreatestCommonDivisor(num1, num2){
//     let result = 0;
//     result = greatestDivisors(getSameDivisors(getDivisors(num1), getDivisors(num2)));
//     return result;
// }

// console.log(getGreatestCommonDivisor(100, 20))


// два числа можно назвать взаимно простыми, если их НОД равен единице.
// Напишите функцию, которая параметрами будет принимать два числа и проверять - взаимно простые они или нет. взаимно простых чисел: 2 и 5, 13 и 16, 35 и 88

// // нахождение делителей
// function getDivisors(num) {
//     let Divisors = [];
//     for (let i = 1; i < num; i++) {
//         if (num % i == 0) {
//             Divisors.push(i);
//         }
//     }
//     return Divisors;
// }
// // console.log(getDivisors(18))

// function elemInArray(elem, arr) {
//     return arr.indexOf(elem) !== -1;
// }

// // пересечение делителей
// function getSameDivisors(arr1, arr2) {
//     let sameDivisors = [];
//     for (let elem of arr1) {
//         if (elemInArray(elem, arr2)) {
//             sameDivisors.push(elem);
//         }
//     }

//     return sameDivisors;
// }
// // // console.log(getSameDivisors([ 1, 2, 3, 6, 9 ], [ 2, 3, 4, 5 ]))

// // функция нахождения взаимно простых чисел с наибольшим общим делителем 1 
// function getGreatestCommonDivisorSimpleDigits(num1, num2) {
//     let nod = greatestDivisors(getSameDivisors(getDivisors(num1), getDivisors(num2)));
//     return nod == 1;
// }

// // наибольшие делители
// function greatestDivisors(arr) {
//     return Math.max.apply(null, arr);
// }

// console.log(getGreatestCommonDivisorSimpleDigits(2, 5))


// Случайный элемент из массива на JavaScript


// Реализуем функцию, возвращающую случайный элемент из массива.
// function getRandomInt(min, max){
//     return Math.floor(Math.random()*(max-min+1))+min
// }

// function getRandomElement(arr){
//     let element = getRandomInt(0, arr.length -1);
//     return arr[element]
// }

// console.log(getRandomElement([1, 2, 5, 6, 7]))


// Используя созданную функцию, найдите сумму трех случайных элементов из массива.
// function getRandomInt(min, max){
//     return Math.floor(Math.random()*(max-min+1))+min
// }

// function getRandomElement(arr){
//     let element = getRandomInt(0, arr.length -1);
//     return arr[element]
// }


// function getRandomElementsSum(arr){

//     let sum = getRandomElement(arr) +getRandomElement(arr)+ getRandomElement(arr);
//     return sum;
// }

// console.log(getRandomElementsSum([1, 2, 5, 6, 7]))


// Перемешивание массива на JavaScript


// Реализуем функцию shuffle, параметром принимающую массив и перемешивающую его элементы в случайном порядке.Реализуем функцию shuffle, параметром принимающую массив и перемешивающую его элементы в случайном порядке.

// // Для реализации описанного нам понадобится функция, возвращающая случайное целое число в заданном диапазоне
// function getRandomInt(min, max) {
//     return Math.floor(Math.random() * (max - min + 1)) + min;
// }

// // console.log(getRandomInt(1, 9))

// let arr = [1, 2, 3, 4, 5];

// // случайный элемент из массива
// let random = getRandomInt(0, arr.length - 1)

// // выводит элемент а не массив
// let elem = arr.splice(random, 1)[0]

// // console.log(elem)

// function getShuffleArr(arr) {
//     let result = [];
//     while (arr.length > 0) {
//         let random = getRandomInt(0, arr.length - 1);
//         let elem = arr.splice(random, 1)[0];
//         result.push(elem);
//     }
//     return result;
// }

// function getRandomInt(min, max) {
//     return Math.floor(Math.random() * (max - min + 1)) + min;
// }

// console.log(getShuffleArr([1, 2, 3, 4, 5]))


// Сделайте функцию range принимающую параметрами 2 целых числа - начало и конец диапазона, и возвращающую массив, заполненный целыми числами из этого диапазона.

// function range(min, max){
//     let result = [];
//     for(let i = min; i<= max; i++){
//         let random = getRandomInt(min, max);
//         result.push(random);
//     }
//     return result;
// }

// function getRandomInt(min, max){
//     return Math.floor(Math.random()*(max-min+1))+1;
// }
// // console.log(getRandomInt(1,3))
// console.log(range(1, 9))

// Сделайте функцию rangeRand, возвращающую массив, заполненный случайными целыми числами из заданного диапазона. При этом числа не должны повторяться. Для решения задачи используйте комбинацию функций range и shuffle.


// function getRandomInt(min, max) {
//     return Math.floor(Math.random() * (max - min + 1)) + min;
// }

// function rangeRand(min, max){
//     let arr =[];
//     for(let i =min; i<=max; i++){
//         arr.push(i);
//     }
//     let result = [];
//     while(arr.length > 0){
//         let random = getRandomInt(0, arr.length -1);
//         let elem = arr.splice(random, 1)[0];
//         result.push(elem)
//     }
//     return result;
//     }


// console.log(rangeRande(1, 5))


// Случайные элементы из массива на JavaScript


// function getRandomInt(min, max) {
// 	return Math.floor(Math.random() * (max - min + 1)) + min;
// }

// function shuffle(arr) {
// 	let result = [];

// 	while (arr.length > 0) {
// 		let random = getRandomInt(0, arr.length - 1);
// 		let elem = arr.splice(random, 1)[0];
// 		result.push(elem);
// 	}

// 	return result;
// }

// // console.log(shuffle([1, 5, 9, 4]))

// // получить указанное кол-во эелементов из массива

// function getFirstElementsInArray(arr, length){
//     return arr.slice(0, length)
// }

// // console.log(getFirstElementsInArray([1, 2, 3, 4, 5], 3))

// function randomElementsInArray(arr, length){
//     return getFirstElementsInArray(shuffle(arr), length)
// }

// console.log(randomElementsInArray([1, 2, 3, 4, 5], 3))



// Счастливые билеты на JavaScript

// Пусть нам нужно вывести на экран все возможные счастливые автобусные билеты. Билет называется счастливым, если сумма первых трех цифр билета р��вн�� сумме вт��ры�� трех ��иф�� (б��де�� рассматривать только билеты, в номере которых 6 цифр).

// Создадим функцию для нахождения счастливых билетов сумма первых трех цифр билета равна сумме вторых трех цифр
// function isLucky(num){
//     let str = String(num);
//     let sum1 = Number(str[0])+Number(str[1])+Number(str[2]);
//     let sum2 = Number(str[3])+Number(str[4])+Number(str[5]);
//     return sum1 == sum2
// }

// // console.log(isLucky(123321))

// // Однако в этой 001001 тоже счасливый - нужно доработаь код, добавим нули

// function numNormalize(num){
//     let str = String(num);
//     if(str.length <= 4){
//         str='00'+str;
//     }
//     if(str.length <= 5){
//         str='0'+str;
//     }
//     return str
// }


// // console.log(numNormalize(100100))

// // усовершенсвуем функцию isLucky

// function isLucky(num){
//     let str = numNormalize(num);
//     let sum1 = Number(str[0])+Number(str[1])+Number(str[2]);
//     let sum2 = Number(str[3])+Number(str[4])+Number(str[5]);
//     return sum1 == sum2
// }

// // console.log(isLucky(1001))
// // цикл выводит все счастливые билеты
// for(let i = 1001; i<= 999999; i++){
//     if(isLucky(i)){
//         console.log(i)
//     }
// }



// // Окончательный код примет следующий вид:
// function getLuckyTickets(){
//     let result = [];

//     for(let i = 1001; i<= 999999; i++){
//         if(isLucky(i)){
//             result.push(i);
//         }
//     }
//     return result;
// }

// function isLucky(num){
//     let str = numNormalize(num);
//     let sum1 = Number(str[0])+Number(str[1])+Number(str[2]);
//     let sum2 = Number(str[3])+Number(str[4])+Number(str[5]);
//     return sum1 == sum2
// }

// function numNormalize(num){
//     let str = String(num);
//     if(str.length <= 4){
//         str='00'+str;
//     }
//     if(str.length <= 5){
//         str='0'+str;
//     }
//     return str
// }

// console.log(getLuckyTickets())


// Счастливые билеты любой длины на JavaScript

// Функция isLucky

// function isLucky(num) {
//     let str = String(num);
//     let str1 = str.substring(0, str.length / 2);
//     let str2 = str.substring(str.length / 2);
//     let sum1 = 0,
//         sum2 = 0;
//     for (let i = 0; i < str.length / 2; i++) {
//         sum1 += Number(str1[i]);
//         sum2 += Number(str2[i]);
//     }
//     return sum1 == sum2
// }

// // console.log(isLucky(11230061));

// function normalizeNum(num, digitsAmount) {
//     let str = String(num);
//     return formStr('0', digitsAmount - str.length) + str;
// }

// // console.log(normalizeNum(15, 2))

// function formStr(data, length) {
//     let str = '';
//     for (let i = 0; i < length; i++) {
//         str += data;
//     }
//     return str;
// }

// // console.log(normalizeNum(123, 10)); 

// // Потестируйте совместную работу функций normalizeNum и isLucky, например, вот так:

// console.log( isLucky(normalizeNum(600123, 6)) ); // выведет true


// Продвинутая теория на функции

// Область видимости переменных в функциях JavaScript



// Функция как переменная в JavaScript

// Сделайте функцию func, которая будет возвращать через return какую-либо строку.

// function func(){
//     return 'some string';
// }

// Выведите результат работы функции func алертом на экран.

// alert(func())

// Выведите исходный код функции func алертом на экран.

// alert(func)

// Запишите в переменную func число 123, тем самым затерев функцию из этой переменной. Выведите новое значение переменной func на экран.

// function func(){
//     return 'some string';
// }

// func = 123;
// console.log(func)

// Запись функции в другую переменную

// Сделайте функцию func1, которая будет возвращать через return число 3.

// function func1(){
//     return 3;
// }

// // Скопируйте исходный код функции func1, в переменную func2.

// let func2 = func1;

// // Выведите на экран сумму результатов работы функций func1 и func2.

// console.log(func2())
// console.log(func1())


// Присваивание функций в переменные при создании

// Сделайте безымянную функцию, которая будет возвращать через return число 1. Запишите эту функцию в переменную func1.

// let func1 = function(){
//     return 1;
// };

// // console.log(func1())

// // Сделайте безымянную функцию, которая будет возвращать через return число 2. Запишите эту функцию в переменную func2.

// let func2 = function(){
//     return 2;
// };

// // Найдите сумму значений функций func1 и func2. Выведите эту сумму алертом на экран.

// let sum = func1() + func2();
// console.log(sum)


// Function expression и Function declaration в JavaScript


// Создайте функцию как Function Declaration. Проверьте то, что она будет доступна выше места своего объявления.
// console.log(decl1());

// function decl1(){
//     return 1;
// }

// Создайте функцию как Function Expression. Проверьте то, что она не будет доступна выше места своего объявления.

// console.log(funcExpres())

// let funcExpres = function(){
//     return 1;
// };

// Нюансы функциональных выражений в JavaScript

// test()

// let test = function func() {
// 	alert('!');
// }


// Массив с анонимными функциями в JavaScript

// Сделайте массив arr с тремя функциями. Пусть первая возвращает через return число 1, вторая - число 2, третья - число 3.

// let arr = [
// 	function(){ return 1},
// 	function(){ return 2},
// 	function(){ return 3}
// ];

// Используя созданный вами массив arr выведите на экран число 3, вызвав соответствующую функцию.

// console.log( arr[2]())

// Используя созданный вами массив arr найдите сумму результатов функций (без цикла).

// console.log( arr[0]() + arr[1]()+arr[2]())

// Переберите созданный вами массив arr циклом и выведите результаты работы всех функций на экран.

// for(let elem of arr){
// 	console.log(elem());
// }


// Объект с анонимными функциями в JavaScript

// Сделайте объект с тремя функциями. Пусть первая возвращает через return число 1, вторая - число 2, третья - число 3. С помощью созданных функций выведите на экран сумму возвращаемых чисел.

// let obj = {
// 	func1: function(){return 1},
// 	func2: function(){return 2},
// 	func3: function(){return 3}
// }

// // console.log(obj.func1() +obj.func2()+obj.func3() )

// // Переберите созданный объект циклом и выведите результаты работы функций на экран.

// for (let elem in obj){
// 	console.log(obj[elem]())
// }

// Сделайте объект с тремя функциями, каждая из которых будет принимать параметром массив с числами. Сделайте так, чтобы первая функция возвращала сумму элементов массива, вторая функция - сумму квадратов, а третья - сумму кубов.

// let obj = {
// 	func1: function(arr){
// 		let sum = 0;
// 		for(let elem of arr){
// 			sum +=elem;
// 		}
// 		return sum;
// 	},
// 	func2: function(arr){
// 		let sum = 0;
// 		for(let elem of arr){
// 			sum =+ elem *elem;
// 		}
// 		return sum;
// 	},
// 	func3: function(arr){
// 		let sum = 0;
// 		for(let elem of arr){
// 			sum =+ elem *elem* elem;
// 		}
// 		return sum;
// 	}
// }

// console.log(obj.func3([3, 3]))


// Передача функций параметрами в JavaScript

// Сделайте функцию test, параметрами принимающую 3 функции. Передайте в нее первым параметром функцию, возвращающую 1, вторым - функцию, возвращающую 2, третьим - функцию, возвращающую 3. Выведите на экран сумму результатов функций.

// test(function () {
// 		return 1
// 	},
// 	function () {
// 		return 2
// 	},
// 	function () {
// 		return 3
// 	})
// 	function test(func1, func2, func3){
// 		console.log(func1()+ func2()+ func3())
// 	}

// Именованные функции

// Сделайте функцию test, параметрами принимающую 3 функции и возвращающую сумму результатов переданных функций.

// test(function (){return 1}, function(){return 2}, function(){ return 3});

// function test(func1, func2, func3){
// 	console.log(func1()+func2()+func3())
// }

// Сделайте 3 функции, объявив их как Function Declaration и дав им имена func1, func2 и func3. Пусть первая функция возвращает 1, вторая - 2, а третья - 3. Передайте эти функции параметром в функцию test из предыдущей задачи.



// function func1() {
// 	return 1;
// }

// function func2() {
// 	return 2;
// }

// function func3() {
// 	return 3;
// }
// test(func1, func2, func3);

// function test(get1, get2, get3) {
// 	console.log(get1() + get2() + get3())
// }

// Модифицируйте предыдущую задачу так, чтобы функции были объявлены как Function Expression с теми же именами.

// let func1 = function () {
// 		return 1;
// 	},
// 	func2 = function () {
// 		return 2;
// 	},
// 	func3 = function () {
// 		return 6;
// 	}

// test(func1, func2, func3);

// function test(func1, func2, func3) {
// 	console.log(func1() + func2() + func3())
// }

// Параметры передаваемых функций

// Скопируйте код моей функции test. Вызовите эту функцию, передав ей параметром анонимную функцию, которая параметром будет принимать число и возвращать его куб.

// test(function(num){
// 	return num* num* num;
// })

// function test(func){
// 	console.log(func(3));
// }

// Переделайте ваш код так, чтобы передаваемая функция была не анонимной, а была определена как Function Declaration с именем func.

// function func(num){
// 	return Math.pow(num, 3);
// }

// function test(func){
// 	return func(3);
// }

// console.log(test(func))

// Переделайте передаваемую функцию на Function Expression с тем же именем func.

// let func = function(num){
// 	return Math.pow(num, 3);
// }

// function test(func){
// 	return func(3);
// }

// console.log(test(func))

// Пусть передаваемая функция теперь принимает два параметра и возвращает их сумму. При вызове передаваемая функции внутри test передайте в передаваемую функцию число 2 и число 3. Выведите алертом результат.

// function func(num1, num2){
// 	return num1 + num2;
// }

// function test(func){
// 	return func(1, 3)
// }
// console.log(test(func))

// Передадим и число параметром

// Пусть функция test первым параметром принимает число, а вторым и третьим параметрами - функции, также параметром принимающие числа.

// Пусть функция test возвращает сумму результатов переданных функций:

// function test(num, func1, func2) {
// 	return func1(num) + func2(num);
// }
// Вызовите функцию test, первым параметром передав число 3, вторым параметром функцию, возводящую число в квадрат, а третьим - функцию, возводящую число в куб. Выведите результат работы на экран.

// function test(num, func1, func2) {
// 	return func1(num) + func2(num);
// }

// console.log(test(3, function func1(num){ return num * num}, function func2(num){return num * num * num}));

// function test(arr, func1) {
// 	for (i = 0; i < arr.length; i++) {
// 		arr[i] = func1(arr[i]);
// 	}
// 	return arr;
// }

// let result = test([1, 2, 3, 4], function func1(num){
// 	return num * num;
// })

// console.log(result)

// Функция в функции

// Сделайте функцию func, которая параметрами будет принимать два числа, а возвращать сумму квадрата первого числа с кубом второго числа.
// Сделайте для этого вспомогательную функцию square, возводящую число в квадрат, и вспомогательную функцию cube, возводящую число в куб.

// function func(num1, num2){
//     function square(num){
//         return num * num;
//     }
//     function cube(num){
//         return num* num * num;
//     }

//     return square(num1) + cube(num2)
// }

// console.log( func(2, 3))


// Функция, возвращающая функцию

// Сделайте функцию func1, которая будучи вызвана вот так: func1()(), вернет число 1. Сделайте аналогичную функцию func2, возвращающую число 2. Найдите сумму результатов этих функций.

// function func1(){
//     return function(){
//         return 1;
//     }
// }

// console.log( func1()())

// function func2(){
//     return function(){
//         return 2;
//     }
// }

// let result =func1()() + func2()();
// console.log(result)

// Любой уровень вложенности

// Сделайте функцию func, которая будучи вызвана вот так: func()()()()(), вернет '!'.

// function func(){
//     return function(){
//         return function(){
//             return function(){
//                 return function(){
//                     return 1;
//                 }
//             }
//         }
//     }
// }

// console.log(func()()()()())

// Сделайте функцию func, которая будучи вызвана вот так: func(2)(3)(4), вернет сумму переданных в параметры чисел.

// function func(num1){
//     return function(num2){
//       return function(num3){
//           return num1 +  num2+ num3;
//       }
//     }
// }

// console.log(func(2)(3)(4))

// Сделайте функцию func, которая будучи вызвана вот так: func(2)(3)(4)(5)(), вернет массив переданных в параметры чисел.

// function func(num1) {
//     let arr = [];
//     arr.push(num1);
//     return function (num2) {
//         arr.push(num2);
//         return function (num3) {
//             arr.push(num3)
//             return function (num4) {
//                 arr.push(num4);
//                 return function (){
//                     return arr;
//                 }
//             };
//         }
//     };
// };


// console.log(func(2)(3)(4)(5)())


// Замыкания

// function test(){
//     let num =1;
//     return function(){
//         console.log(num);
//         num++;
//     };
// }
// let func = test();
// func()
// func()

// Пусть функция в замыкании хранит число 10. Сделайте так, чтобы каждый вызов функции уменьшал это число на 1 и выводил на экран уменьшенное число.

// function test() {
//     let num = 10;
//     return function () {
//         console.log(num);
//         num--;
//     };
// }
// let func = test();
// func();
// func();
// func();

// Модифицируйте предыдущую задачу так, чтобы отсчет доходил до 0, а затем каждый последующий вызов функции выводил на экран сообщение о том, что отсчет окончен.

// function test() {
//     let num = 10;
//     return function () {
//         if (num != -1) {
//             console.log(num)
//             num--;
//         } else {
//             console.log('end of count')
//         }
//     }
// }
// let func = test();
// func();
// func();
// func();
// func();
// func();
// func();
// func();
// func();
// func();
// func();
// func();
// func();
// func();

// function test() {
// 	let counter = 0;

// 	return function() {
// 		return function() {
// 			console.log(counter);
// 			counter++;
// 		};
// 	};
// };

// let func = test();

// let func1 = func();
// let func2 = func();
// func1();
// func2();
// func1();
// func2();


// Вызов функции на месте в JavaScript

// Допишите следующий код так, чтобы его запуск алертом выводил '!':

// (function() {
// 	// какой-то код
// })()()();

// (function(){
// 	return function(){
// 		return function(){
// 			console.log('!')
// 		};
// 	};
// })()()();


// Допишите следующий код так, чтобы его запуск выводил сумму переданных параметрами чисел:
// (function() {
// 	// какой-то код
// })(1)(2);


// (function(num){
// 	return function(num1){
// 		console.log(num+ num1)
// 	};
// })(1)(2)

// Допишите следующий код так, чтобы его запуск выводил сумму переданных параметрами чисел:

// (function() {
// 	// какой-то код
// })(1)(2)(3);

// (function(num1){
// 	return function(num2){
// 		return function(num3){
// 			console.log(num1+num2+num3);
// 		};
// 	};
// })(1)(2)(3);


// Замыкания и вызов функции на месте

// let fn = (function () {
// 	let num = 1;
// 	return function () {

// 		console.log(num);
// 		num++;
// 	}
// })();

// fn();
// fn();
// fn()

// Модифицируйте работу счетчика так, чтобы он считал до 5, а потом отсчет начинался сначала.


// let fn = (function () {
// 	let num = 1;
// 	return function () {
// 		if(num != 6){
// 		console.log(num);
// 		num++;} else{ 
// 			num = 0;
// 			num++;
// 		}
// 	}
// })();

// fn();
// fn();
// fn();
// fn();
// fn();
// fn();
// fn();
// fn();
// fn();
// fn();
// fn();
// fn();
// fn();
// fn();
// fn();


// Понятие функции-коллбэка


// Дан массив со строками. С помощью созданной нами функции each переверните символы каждой строки в обратном порядке.

// let result = each(['monday', 'tuesday', 'wednesday'], function (str) {
// 	return str.split('').reverse().join('');
// });

// console.log(result)
// function each(arr, callback) {
// 	let res = [];
// 	for (let elem of arr) {
// 		res.push(callback(elem));
// 	}
// 	return res;
// }


// Дан массив со строками. С помощью созданной нами функции each сделайте заглавным первый символ каждой строки.

// let result = each(['понедельник', 'вторник', 'среда'], function (str) {
// 	str.split('');
// 	return str[0].toUpperCase() + str.slice(1);
// });
// console.log(result);

// function each(arr, callback) {
// 	let res = [];
// 	for (let elem of arr) {
// 		res.push(callback(elem));
// 	}
// 	return res;
// }

// Количество параметров в коллбэке

// в конец каждого элемента массива добавить его порядковый номер:


// let result = each(['a', 'b', 'c', 'd', 'e'], function(elem, index) {
// 	return elem + index;
// });

// console.log(result); // должно вывести ['a0', 'b1', 'c2', 'd3', 'e4']

// function each(arr, callback) {
// 	let result = [];
// 	let i = 0;

// 	for (let elem of arr) {
// 		result.push( callback(elem, i++) ); // вторым параметром передаем счетчик
// 	}

// 	return result;
// }


// Дан массив с числами. С помощью созданной нами функции each найдите произведение каждого элемента массива на его порядковый номер.

// function each(arr, callback){
// 	let result = [];
// 	let i=0;
// 	for(let elem of arr){
// 		result.push(callback(elem, i++))
// 	}
// 	return result;
// }

// let result = each([1, 3, 5, 5, 6], function(elem, index){
// 	return elem * index;
// });
// console.log(result)


// Реализуйте функцию filter, которая будет осуществлять фильтрацию массива. Пусть первым параметром функция принимает массив, а вторым - функцию-коллбэк, и возвращает массив элементов, для которых функция-коллбэк вернет true.

// Пример работы такой функции (оставим в массиве только четные числа):

// let result = filter([1, 2, 3, 4, 5], function(elem) {
// 	if (elem % 2 == 0) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// });

// console.log(result); // выведет [2, 4]
// Пусть в первый параметр коллбэка попадает элемент массива, а во второй - его номер. Дан массив с числами. С помощью созданной нами функции filter оставьте в этом массиве только положительные числа.

// let result = filter([1, 2, 3, 4, 5], function(elem) {
// 	if (elem % 2 !== 0) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// });

// console.log(result); // выведет [2, 4]

// function filter(arr, callback){
// 	let result = [];
// 	for(let elem of arr){
// 		if(!callback(elem)){
// 			result.push(elem)
// 		}
// 	}
// 	return result;
// }

// Дан массив со строками. С помощью созданной нами функции filter оставьте в этом массиве только строки, длина которых от 1 до 3 символов.

// let result = filter(['str', 'string', 'monday', 'and', 'do'], function(elem) {
// 	if (elem.length < 4) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// });

// function filter(arr, callback){
// 	let result = [];
// 	for(let elem of arr){
// 		if(callback(elem)){
// 			result.push(elem)
// 		}
// 	}
// 	return result;
// }

// console.log(result);


// Реализуйте функцию every, которая будет возвращать true, если для всех элементов массива функция-коллбэк вернула true, и будет возвращать false в противном случае.

// Пример работы такой функции (проверим, что в массиве только положительные числа):

// let result = every([1, 2, 3, 4, 5], function(elem) {
// 	if (elem > 0) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// });

// console.log(result); // выведет true

// let result = every([1, 2, 3, 4, 5], function(elem) {
// 	if (elem > 0) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// });

// function every(arr, callbackFunction){
// 	let result = [];
// 	for(let elem of arr){
// 		if(callbackFunction(elem)){
// 			result.push(elem);
// 		}
// 	}
// 	return result;
// }

// console.log(result)


// Реализуйте функцию some, которая будет возвращать true, если для хотя бы для одного элемента массива функция-коллбэк вернула true, и будет возвращать false в противном случае.

// Пример работы такой функции (проверим, что в массиве есть хотя бы одно отрицательное число):

// let result = every([1, 2, 3, 4, 5], function(elem) {
// 	if (elem < 0) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// });

// console.log(result); // выведет false

// let result = every([-1, 2, 3, 4, 5], function(elem) {
// 	if (elem < 0) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// });

// function every(arr, callbackFunction){
// 	let result = [];
// 	for(let elem of arr){
// 		if(callbackFunction(elem)){
// 			result.push(elem)
// 		}
// 	}
// 	return result
// }

// console.log(result)




// Реализуйте функцию alternate, которая первым параметром будет принимать массив, а вторым и третьим - коллбэки.

// Функция должна по очереди применять коллбэки к элементам массива. То есть: для первого элемента - первый коллбэк, для второго элемента - второй коллбэк, для третьего - опять первый коллбэк и так далее пока элементы массива не закончатся.

// Пример работы такой функции ():

// let result = alternate(
// 	['a', 'b', 'c', 'd', 'e'],
// 	function(elem) {
// 		return elem + '!';
// 	},
// 	function(elem) {
// 		return elem + '?';
// 	},
// );

// console.log(result); // выведет ['a!', 'b?', 'c!', 'd?', 'e!']


// let result = alternate(
// 	['a', 'b', 'c', 'd', 'e'],
// 	function(elem) {
// 		return elem + '!';
// 	},
// 	function(elem) {
// 		return elem + '?';
// 	},
// );

// function alternate(arr, callbackFunction1, callbackFunction2){
// 	let result = [];
// 	for(let i = 0; i < arr.length; i++){
// 		if( i % 2 == 0){
// 			result.push(callbackFunction1(arr[i]));
// 		} else{
// 			result.push(callbackFunction2(arr[i]))
// 		}
// 	}
// 	return result
// }

// console.log(result)



// Стрелочные функции

// Дана следующая функция с коллбэком:

// let result = every([1, 2, 3, 4, 5], function(elem) {
// 	if (elem > 0) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// });
// Упростите коллбэк через стрелочную функцию.

// let result = every([-11, 2, 3, 4, 5], (elem) => elem < 0)

// Дана следующая функция с коллбэком:

// let result = every([1, 2, 3, 4, 5], function(elem, index) {
// 	if (elem * index > 10) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// });
// Упростите коллбэк через стрелочную функцию.



// let result = every([1, 2, 4, 4], (elem, index) => elem * index > 10)

// Дана следующая функция с коллбэком:

// let arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];

// let result = each(, function(elem, index) {
// 	if (elem * index > 10) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// });
// Упростите коллбэк через стрелочную функцию.

// let result = each(, (elem, index) => elem * index > 10)


// Рекурсия

// Сделайте функцию, которая с помощью рекурсии выведет первые 10 чисел Фибоначчи. Числа Фибоначчи строятся следующим образом: каждое новое число равно сумме двух предыдущих. Первые два числа Фибоначчи - это 1 и 2. Следующее число будет равно 1 + 2 = 3, следующее число будет равно 2 + 3 = 5 и так далее.

// Вот основа кода, который вы должны написать:

// function func(prevPrevNum, prevNum){
// 	// тут код с рекурсией, который вы должны написать
// }

// func(1, 2); // вызываем функцию с первыми двумя числами

// function func(prevPrevNum, prevNum){
// 	console.log(prevPrevNum + prevNum);
// 	if(prevNum < 10){
// 		++prevPrevNum;
// 		++prevNum;
// 		func(prevPrevNum, prevNum)
// 	}
// }
// func(1, 2)

// Модифицируйте предыдущую задачу так, чтобы функция не выводила числа, а возвращала массив первых 10 чисел Фибоначчи:

// console.log(func(1, 2)); // выведет массив чисел
// let arr = [];

// function func(prevPrevNum, prevNum) {
// 	arr.push(prevPrevNum + prevNum)
// 	if (prevNum < 10) {
// 		++prevPrevNum;
// 		++prevNum;
// 		func(prevPrevNum, prevNum);
// 	}
// 	return arr;
// }
// console.log(func(1, 2))


// Редуцирование числа
// Пусть нас есть какое-то число, например, 12345. Давайте будем последовательно складывать цифры этого числа до тех пор, пока сумма не станет однозначным числом.

// Посмотрим, что имеется ввиду. Давайте сложим цифры нашего числа 12345: 1 + 2 + 3 + 4 + 5 = 15. Как вы видите, мы получили число 15. Давайте опять сложим его цифры: 1 + 5 = 6. На этом остановимся, так как число стало однозначным.

// Когда такое может пригодится? К примеру, есть признак деления на числа на 9: если сумма цифр числа делится на 9, то и число делится на 9.


// function getDigits(num){
//     return String(num).split('');
// }

// // console.log(getDigits(4353))
// function getSum(arr){
//     let sum = 0;
//     for(let elem of arr){
//         sum +=Number(elem)
//     }
//     return sum;
// }
// // console.log(getSum([ '4', '3', '5', '3' ]))

// function getDigitsSum(num){
//     return getSum(getDigits(num))
// }

// // console.log(getDigitsSum(4648989))

// function reduceNum(num){
//     let sum = getDigitsSum(num);
//     if(sum <= 9){
//         return sum;
//     }else{
//        return reduceNum(sum)
//     }
// }

// console.log(reduceNum(2187))


// Рекурсия и многомерные структуры


// Дан многомерный объект произвольного уровня вложенности, например, такой:

// {a: 1, b: {c: 2, d: 3, e: 4}, f: {g: 5, j: 6, k: {l: 7, m: {n: 8, o: 9}}}}
// С помощью рекурсии выведите все примитивные элементы этого объекта на экран.

// let obj = {
//     a: 1,
//     b: {
//         c: 2,
//         d: 3,
//         e: 4
//     },
//     f: {
//         g: 5,
//         j: 6,
//         k: {
//             l: 7,
//             m: {
//                 n: 8,
//                 o: 9
//             }
//         }
//     }
// };

// function func(obj) {
//     for (let key in obj) {
//         if (typeof obj[key] == 'object') {
//             func(obj[key])
//         } else {
//             console.log(obj[key])
//         }
//     }
// }

// func(obj)

// Дан многомерный объект произвольного уровня вложенности, например, такой:

// {a: 1, b: {c: 2, d: 3, e: 4}, f: {g: 5, j: 6, k: {l: 7, m: {n: 8, o: 9}}}}
// С помощью рекурсии найдите сумму элементов этого объекта.

// function func(obj){
//     let sum = 0;
//     for(let key in obj){
//         if(typeof obj[key] == 'object'){
//             sum+=func(obj[key]);
//         }else{
//             sum +=obj[key]
//         }
//     }
//     return sum;
// }

// console.log(func({a: 1, b: {c: 2, d: 3, e: 4}, f: {g: 5, j: 6, k: {l: 7, m: {n: 8, o: 9}}}}))


// Дан многомерный массив произвольного уровня вложенности, содержащий внутри себя строки, например, такой:

// ['a', ['b', 'c', 'd'], ['e', 'f', ['g', ['j', 'k']]]]
// С помощью рекурсии слейте элементы этого массива в одну строку:

// 'abcdefgjk'

// let arr = ['a', ['b', 'c', 'd'], ['e', 'f', ['g', ['j', 'k']]]];

// function func(arr){
//     let result = '';
//     for(let elem of arr){
//         if(typeof elem == 'object'){
//             result+=func(elem)
//         } else{
//             result+= elem
//         }
//     }
//     return result
// }

// console.log(func(arr))

// Дан многомерный массив произвольного уровня вложенности, например, такой:

// [1, [2, 7, 8], [3, 4], [5, [6, 7]]]
// Возведите все элементы-числа этого массива в квадрат.

// function func(arr) {
// 	for (let i = 0; i < arr.length; i++) {
// 		if (typeof arr[i] == 'object') {
// 			arr[i] = func(arr[i]);
// 		} else {
// 			arr[i] = arr[i] * arr[i];
// 		}
// 	}

// 	return arr;
// }

// console.log(func([1, [2, 7, 8], [3, 4], [5, [6, 7]]]));


// Дан многомерный массив произвольного уровня вложенности, например, такой:

// [1, [2, 7, 8], [3, 4, [5, [6, 7]]]]
// Напишите код, который развернет наш многомерный массив в одномерный. Для приведенного выше массива это будет выглядеть вот так:

// [1, 2, 7, 8, 3, 4, 5, 6, 7]

// let arr = [1, [2, 7, 8],
//     [3, 4, [5, [6, 7]]]
// ];
//    let resultArr = [];
// function func(arr) {

//     for (let i = 0; i < arr.length; i++) {
//         if (typeof arr[i] == 'object') {
//             func(arr[i]);
//         } else {
//             resultArr.push(arr[i])
//         }
//     }
//     return resultArr;
// }
// console.log(func(arr))

// Дан многомерный массив произвольного уровня вложенности. Подсчитайте с помощью рекурсии самый максимальный уровень вложенности этого массива.

// let arr = [
//     [1, 2, [3, [4, [5, 6, 7]]]], 8
// ];
// let ind = 0;

// function Max(arr) {
//     for (let i = 0; i < arr.length; i++) {
//         if (typeof arr[i] == 'object') {
//             Max(arr[i]);
//             ind++;
//         }
//     }
//     return ind;
// }
// console.log(Max(arr))


// Метод map для перебора массива


// Дан массив с числами. Используя метод map извлеките из каждого элемента массива квадратный корень и запишите результат в новый массив.

// let arr = [4, 9, 3, 4, 5];

// let result = arr.map(function(elem){
//     return Math.sqrt(elem)
// })

// console.log(result)

// Дан массив со строками. Используя метод map в конец значению каждого элемента массива добавьте символ '!'.

// let arr = ['srt', 'back', 'stack'];

// let result = arr.map(function(elem){
//     return elem + '!'
// })

// console.log(result)

// Дан массив со строками. Используя метод map переверните символы каждой строки в обратном порядке.

// let arr = ['srt', 'back', 'stack'];

// let result = arr.map(function(elem){
//     return elem.split('').reverse().join('')
// })
// console.log(result)

// Дан следующий массив:

// let arr = ['123', '456', '789'];
// Используя метод map преобразуйте этот массив в следующий:

// let arr = [
// 	[1, 2, 3],
// 	[4, 5, 6],
// 	[7, 8, 9]
// ];

// let arr = ['123', '456', '789'];

// let result = arr.map(function(elem){

//     return elem.split('')
// })
// console.log(result)


// Ключ элемента

// Дан массив с числами. Используя метод map запишите в каждый элемент массива значение этого элемента, умноженное на его порядковый номер в массиве.

// let arr = [4, 9, 3, 4, 5];

// let result = arr.map(function(elem, index){
//     return elem*index;
// })
// console.log(result)


// Применение forEach

// Дан массив с числами. Используя метод forEach найдите сумму квадратов элементов этого массива.

// let arr = [4, 9, 3, 4, 5];
// let sum = 0;

// arr.forEach(function(elem){
//     return sum +=elem * elem;
// })

// console.log(sum)



// Метод filter

// Дан массив с числами. Оставьте в нем только положительные числа.

// let arr = [-1, 2, 3, 4, 5];

// let result = arr.filter(function(elem){
//     return elem > 0;
// })

// console.log(result)

// Дан массив с числами. Оставьте в нем только отрицательные числа.

// let arr = [-1, 2, 3, 4, 5];

// let result = arr.filter(elem => elem < 0)

// console.log(result)

// Дан массив с числами. Оставьте в нем только числа, которые больше нуля, но меньше 10.

// let arr = [-1, 2, 3, 4, 51, 60];

// let result = arr.filter(function(elem){
//     return elem > 0 && elem < 10
// })
// console.log(result)

// Дан массив со строками. Оставьте в нем только те строки, длина которых больше 5-ти символов.

// let arr = ['srt', 'back', 'stack', 'striker'];

// let result = arr.filter(function(elem){
//     return elem.length>5
// })
// console.log(result)

// Дан массив с числами. Оставьте в нем только те числа, произведение которых на их порядковый номер меньше 30.

// let arr = [-1, 2, 3, 4, 51, 60];

// let result = arr.filter(function(elem, index){
//     return elem*index < 30
// })
// console.log(result)

// Дан массив, в нем могут быть обычные элементы и подмассивы, например [1, 2, [3, 4], 5, [6, 7]]. Оставьте в нем только обычные элементы.

// let arr = [1, 2, [3, 4], 5, [6, 7]];
// let newArr

// let result = arr.filter(function(elem){
//     if(Array.isArray(elem)){
//         return false;
//     } else return true
// })
// console.log(result)


// Дан массив с числами. Посчитайте количество отрицательных чисел в этом массиве.

// let arr = [-1, 2, 3, 4, 51, -60, -5];

// console.log(arr.filter(elem => elem <0).length)


// Метод every

// Дан массив с числами. Проверьте то, что все элементы в массиве больше нуля.

// let arr = [-1, 2, 3, 4, 51, -60, -5];

// let result = arr.every(elem => elem > 0)
// console.log(result)

// Дан массив с числами. Проверьте то, что для всех элементов произведение их значений на их порядковый номер меньше 30.

// let  arr = [1, 2, 3, -10, 10];

// let result = arr.every(function(elem, index){
//     return elem*index < 30
// })

// console.log(result)


// Метод some для проверки массива

//  Дан массив с числами. Проверьте то, что в нем есть отрицательные элементы

// let  arr = [1, 2, 3, -10, 10];

// let result = arr.some(function(elem){
//     return elem < 0;
// })

// console.log(result)


// Оператор spread


// Дан массив:

// let arr = [1, 2, 3, 4, 5];
// Дана также функция:

// function func(num1, num2, num3, num4, num5) {
// 	return num1 + num2 + num3 + num4 + num5;
// }
// Найдите с помощью приведенной функции сумму элементов массива.

// let arr = [1, 2, 3, 4, 5];

// function func(num1, num2, num3, num4, num5) {
//     return num1 + num2 + num3 + num4 + num5;
// } 
// console.log(func(...arr))

// Дан массив с числами. Используя Math.min и spread выведите на экран минимальное значение массива.

// let arr = [1, 2, 3, 4, 5]
// let min = Math.min(...arr);

// console.log(min)


// Применение операторов rest и spread. Функция, находящая сумму чисел

// Напишите функцию, которая будет принимать параметрами произвольное количество чисел и возвращать их среднее арифметическое (сумма делить на количество).

// function sumNum(...nums){
//     let sum = 0;
//     for(let elem of nums){
//         sum += elem;
//     }
//     return sum / nums.length;
// }
// console.log(sumNum(1, 2, 3, 10))


// Функция, сливающая массивы в двухмерный

// function unite(...arrs){
// 	return arrs;
// }

// let result = unite([1, 2, 3], [4, 5, 6], [7, 8, 9]);
// console.log(result);

// Для сравнения реализуйте нашу функцию без использования оператора rest.

// let arr = [1, 2, 3];
// let arr1 = [4, 5, 6];
// let arr2 = [7, 8, 9]

// function unite(arr, arr1, arr2){
//     let newArr = [];
//     newArr.push(arr, arr1, arr2);
//     return newArr;
// }

// console.log(unite(arr, arr1, arr2))


// Функция, сливающая массивы в один

// let arrs   = [ [1, 2, 3,] [4, 5, 6], [7, 8, 9] ];

// function merge(...arrs) {
// 	return [].concat(...arrs);
// }

// let result = merge([1, 2, 3], [4, 5, 6], [7, 8, 9]);
// console.log(result);

// Для сравнения реализуйте нашу функцию без использования оператора rest.

// let arr = [1, 2, 3];
// let arr1 = [4, 5, 6];
// let arr2 = [7, 8, 9];

// function merge(arr, arr1, arr2) {
// 	return [].concat(arr, arr1, arr2);
// }
// console.log(merge(arr, arr1, arr2))


// Пересечение произвольного количества массивов

// проверка наличия элемента в массиве




// function getInt(...arrs){
//     let result = [];

//     let arr0 = arrs.shift();

//     for(let elem of arr0) {
//         if(inArrays(elem, arrs)){
//             result.push(elem);
//         }
//     }

//     return result;
// }

// function inArrays(elem, arrs){
//     for (let arr of arrs){
//         if (!inArray(elem, arr)){
//             return false;
//         }
//     }

//     return true;
// }

// function inArray(elem, arr){
//     return arr.indexOf(elem) !== -1;
// }


// let result = getInt([1, 2, 3], [2, 3, 4], [4, 3, 2]);
// console.log(result);

// Разность произвольного количества массивов
// В данном уроке мы с вами напишем функцию getDiff, которая будет находить разность произвольного количества массивов.

// За основу возьмите код, полученный нами ранее в предыдущих уроках:

// function getDiff(arr1, arr2){
// 	let result = [];

// 	let diff1 = getFirstDiff(arr1, arr2);
// 	let diff2 = getFirstDiff(arr2, arr1);

// 	return [].concat( diff1, diff2 );
// }

// function getFirstDiff(arr1, arr2){
// 	let result = [];

// 	for (let elem of arr1) {
// 		if (!inArray(elem, arr2)) {
// 			result.push(elem);
// 		}
// 	}

// 	return result;
// }

// function inArray(elem, arr){
// 	return arr.indexOf(elem) !== -1;
// }

// // Решение




//  function alt(arr) {
//     let res = [];
//     for (let i = 0; i < arr.length; i++) {
//         if (i !== arr.indexOf(arr[i]) || arr.indexOf(arr[i]) == -1) {
//             res.push(arr[i])
//         }
//     }
//     return res;
// }

// function getDiff(arr1, arr2) {
//     let result = [];

//     let diff1 = getFirstDiff(arr1, arr2);
//     let diff2 = getFirstDiff(arr2, arr1);

//     return [].concat(diff1, diff2);
// }

// function getFirstDiff(arr1, arr2) {
//     let result = [];

//     for (let elem of arr1) {
//         if (!inArray(elem, arr2)) {
//             result.push(elem);
//         }
//     }

//     return result;
// }

// function inArray(elem, arr) {
//     return arr.indexOf(elem) !== -1;
// }

// function DiffArr(...arrs) {
//     let arr = [].concat(...arrs);
//     return getDiff(alt(arr), arr);
// }
// console.log(DiffArr([0, 1], ['a', 'b'], [-1, 'b'], ['jjj', -1], ['b', 52]))


// Деструктуризация массивов


// В следующем коде части массива записываются в соответствующие переменные:

// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];

// let name       = arr[0];
// let surname    = arr[1];
// let department = arr[2];
// let position   = arr[3];
// let salary     = arr[4];


// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];

// let[Name, Surname, Department, Position, year]= arr;

// console.log(year)

// Массив из функции

// В следующем коде части массива записываются в соответствующие переменные:

// function func() {
// 	return ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];
// }

// let arr = func();

// let name       = arr[0];
// let surname    = arr[1];
// let department = arr[2];
// let position   = arr[3];
// let salary     = arr[4];
// Переделайте этот код через деструктуризацию согласно изученной теории.


// function func() {
// 	return ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];
// }

// let[Name, Surname, Department, Position, year] = func()

// console.log(Name)


// Пропуск значений

// В следующем коде части массива записываются в соответствующие переменные:

// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];

// let department = arr[2];
// let position   = arr[3];
// Переделайте этот код через деструктуризацию согласно изученной теории.

// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];

// let[,, department, position,] = arr;

// console.log(department)


// Остаток

// В следующем коде части массива записываются в соответствующие переменные:

// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];

// let name    = arr[0];
// let surname = arr[1];

// let info = arr.slice(2); // все элементы со второго до конца массива
// Переделайте этот код через деструктуризацию согласно изученной теории.

// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];

// let[Name, Surname, ...other] = arr;

// console.log(...other)


// Значение по умолчанию


// В следующем коде части массива записываются в соответствующие переменные:

// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист'];

// let name       = arr[0];
// let surname    = arr[1];
// let department = arr[2];

// let position;
// if (arr[3] !== undefined) {
// 	position = arr[3];
// } else {
// 	position = 'джуниор';
// }
// Переделайте этот код через деструктуризацию согласно изученной теории.

// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист'];

// let[name, surname, department, position = 'junior']= arr;
// console.log(position)


// Функции в качестве значения по умолчанию

// функция, возвращающая текущий день недели:

// let arr = [2020, 12];
// function func() {
// 	return (new Date).getDate();
// }

// let [year, month, day = func()] = arr;

// console.log(day)

// Модифицируйте полученный выше код так, чтобы при отсутствии в массиве значения для месяца по умолчанию брался текущий месяц, а при отсутствии значения для года - соответственно текущий год.

// let arr = [2012, , 06];

// function day() {
//     return (new Date).getDate();
// }

// function month() {
//     return (new Date).getMonth()+1;
// }

// function year() {
//     return (new Date).getFullYear();
// }
// let [year1 = year(), month1 = month(), day1 = day()] = arr;

// console.log(month1)


// Деструктуризация объектов


// В следующем коде части объекта записываются в соответствующие переменные:

// let options = {
// 	color: 'red',
// 	width:  400,
// 	height: 500,
// };

// let color  = options.color;
// let width  = options.width;
// let height = options.height;
// Переделайте этот код через деструктуризацию согласно изученной теории.

// let options = {
// 	color: 'red',
// 	width:  400,
// 	height: 500,
// };

// let{color, width, height} = options;
// console.log(color)


// Другие имена переменных

// В следующем коде части объекта записываются в соответствующие переменные:

// let options = {
// 	color: 'red',
// 	width:  400,
// 	height: 500,
// };

// let c = options.color;
// let w = options.width;
// let h = options.height;
// Переделайте этот код через деструктуризацию согласно изученной теории.

// let options = {
// 	color: 'red',
// 	width:  400,
// 	height: 500,
// };

// let{color: c, width: w, height: h} = options;
// console.log(w)

// Значения по умолчанию

// В следующем коде части объекта записываются в соответствующие переменные:

// let options = {
// 	width:  400,
// 	height: 500,
// };

// let color;
// if (options.color !== undefined) {
// 	color = options.color;
// } else {
// 	color = 'black';
// }

// let width  = options.width;
// let height = options.height;
// Переделайте этот код через деструктуризацию согласно изученной теории.

// let options = {
// 	width:  400,
// 	height: 500,
// };

// let{width, height, color = 'black'}= options;
// console.log(color)

// Другие переменные и значения по умолчанию


// В следующем коде части объекта записываются в соответствующие переменные:

// let options = {
// 	width:  400,
// 	height: 500,
// };

// let с;
// if (options.с !== undefined) {
// 	с = options.color;
// } else {
// 	с = 'black';
// }

// let w = options.width;
// let h = options.height;
// Переделайте этот код через деструктуризацию согласно изученной теории.


// let options = {
// 	width:  400,
// 	height: 500,
// };

// let{width:w, height:h, color:c='black'}=options;
// console.log(c)


// Деструктуризация параметров функций


// Переделайте следующий код через деструктуризацию согласно изученной теории:

// function func(employee) {
// 	let name       = employee[0];
// 	let surname    = employee[1];
// 	let department = employee[2];
// 	let position   = employee[3];
// 	let salary     = employee[4];
// }

// func( ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000] );


// function func([name, surname, department, position, salary]) {
//     console.log(name);
//     console.log(surname)
// }

// func( ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000] );

// Переделайте следующий код через деструктуризацию согласно изученной теории:

// function func(employee) {
// 	let name     = employee[0];
// 	let surname  = employee[1];
// 	let info     = employee.slice(2);
// }

// func( ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000] );


// function func([name, surname, ...info]) {
//     console.log(name);
//     console.log(...info)
// }

// func( ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000] );

// Переделайте следующий код через деструктуризацию согласно изученной теории:

// function func(employee) {
// 	let name       = employee[0];
// 	let surname    = employee[1];
// 	let department = employee[2];

// 	let position;
// 	if (arr[3] !== undefined) {
// 		position = arr[3];
// 	} else {
// 		position = 'джуниор';
// 	}
// }

// func( ['Иван', 'Иванов', 'отдел разработки'] );


// function func([name, surname, department, position = 'junior']){
//     console.log(name, position)
// }

// func( ['Иван', 'Иванов', 'отдел разработки'] );


// Переделайте следующий код через деструктуризацию согласно изученной теории:

// function func(department, employee, hired) {
// 	let name     = employee[0];
// 	let surname  = employee[1];

// 	let year  = hired[0];
// 	let month = hired[1];
// 	let day   = hired[2];
// }

// func( 'отдел разработки', ['Иван', 'Иванов'], '2018-12-31' );

// function func(department, [name, surname], hired) {
//     let [year, month, day] = hired.split('-')
//     console.log(department);
//     console.log(name);
//     console.log(surname);
//     console.log(year);
//     console.log(month);
//     console.log(day);
// }
// func('отдел разработки', ['Иван', 'Иванов'], '2018-12-31');


// Объекты в параметрах

// Переделайте следующий код через деструктуризацию согласно изученной теории:

// function func(options) {
// 	let color  = options.color;
// 	let width  = options.width;
// 	let height = options.height;
// }

// func( {color: 'red', width: 400, height: 500} );

// function func({color, width, height}) {
//     console.log(color);
//     console.log(width);
//     console.log(height);
// }

// func( {color: 'red', width: 400, height: 500} );


// Переделайте следующий код через деструктуризацию согласно изученной теории:

// function func(options) {
// 	let width  = options.width;
// 	let height = options.height;

// 	let color;
// 	if (options.color !== undefined) {
// 		color = options.color;
// 	} else {
// 		color = 'black';
// 	}
// }

// func( {color: 'red', width: 400, height: 500} );


// function func({color = 'black', width, height}) {
//     console.log(color);
//     console.log(width);
//     console.log(height)
// }

// func( {color: 'red', width: 400, height: 500} );


// Работа с объектом Date

// let date = new Date()
// // Выведите на экран текущий день.
// console.log(date.getDate())
// // Выведите на экран текущий месяц.
// console.log(date.getMonth())
// // Выведите на экран текущий год.
// console.log(date.getFullYear())


// Форматирование даты

// Выведите на экран текущую дату-время в формате '12:59:59 31.12.2014'. Используйте для всех частей даты (кроме года) созданную нами функцию для добавления нуля при необходимости.

// function addZeros(num){
//     if(num>=0 && num <=9){
//         return '0' + num;
//     } else{
//         return num;
//     }
// }

// let date = new Date();
// console.log(addZeros(date.getHours())+":"+addZeros(date.getMinutes())+":"+addZeros(date.getSeconds())+' '+addZeros(date.getDate())+'.'+addZeros(date.getMonth()+1)+'.'+date.getFullYear())

// Преобразование формата даты

// Дана дата в формате год-месяц-день. Преобразуйте эту дату в формат день.месяц.год.

// let date = '2020-06-07';
// let resultDate = date.split('-').reverse().join('-');
// console.log(resultDate)

// Получения дня недели

// Выведите на экран номер текущего дня недели.
// let date = new Date();
// console.log(date.getDay())


// Вывод частей даты словом


// Пусть дан следующий массив:

// let months = [
// 	'янв', 'фев', 'мар', 'апр', 'май', 'июн',
// 	'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'
// ];
// Выведите с помощью этого массива название текущего месяца.

// let months = [
// 	'янв', 'фев', 'мар', 'апр', 'май', 'июн',
// 	'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'
// ];

// let date = new Date();
// let month = date.getMonth();
// console.log(months[month])


// Установка времени в объекте Date


// Узнайте, какой день недели был в ваш день рождения.

// let date = new Date(1987, 5, 18);
// let days = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];
// let day = date.getDay();
// console.log(days[day])


// Работа с getTime

// Выведите на экран timestamp, соответствующий дате 1 января 2025 года.

// let date = new Date(2025, 0, 1);
// let timestamp = date.getTime();
// console.log(timestamp)


// Разница между датами


// Выведите на экран количество дней, прошедшее между 1 марта 1988 года и 10 января 2000 года.
// let oldDate = new Date(1988, 2, 1);
// let newDate = new Date(2000, 0, 10)

// let diff = newDate.getTime() - oldDate.getTime();
// console.log(diff /(1000*60*60*24))

// Выведите на экран количество месяцев, прошедшее между вашим рождением и текущим моментом времени.

// let oldDate = new Date(1987, 5, 18);
// let newDate = new Date();

// let diff = newDate.getTime() - oldDate.getTime();
// console.log(diff /(1000*60*60*24*31))


// Разница между объектами с датой

// Выведите на экран количество миллисекунд, прошедшее между 1 сентября 2000 года и 15 февраля 2010 года.

// let oldDate = new Date(2000, 8, 1);
// let newDate = new Date(2010, 1, 15);

// let result = newDate - oldDate;
// // console.log(result)

// // Модифицируйте предыдущую задачу так, чтобы на экран выводилась разница в днях.
// console.log(result/(1000*60*60*24))
// // Модифицируйте предыдущую задачу так, чтобы на экран выводилась разница в месяцах.
// console.log(result/(1000*60*60*24*30.5))
// // Модифицируйте предыдущую задачу так, чтобы на экран выводилась разница в годах.
// console.log(result/(1000*60*60*24*30.5*12))


// Проверка корректности даты

// Сделайте функцию checkDate, которая будет выполнять опи��анну�� проверку. Пусть функция возвращает true, если дата корректна и false, если нет. Пример работы этой функции для 31 января и 32 января:

// console.log(checkDate(2025, 0, 31)); // выведет true
// console.log(checkDate(2025, 0, 32)); // выведет false

// function checkDate(year, month, day) {
//     let date = new Date(year, month, day);

//     if (date.getFullYear() == year && date.getMonth() == month && date.getDate() == day) {
//         console.log('дата корректна');
//     } else {
//         console.log('дата некорректна');
//     }
// }

// console.log(checkDate(2025, 0, 33))


// Получение моментов времени

// День текущего года

// Определите, какой день недели будет 31 декабря текущего года.

// let now = new Date();
// let newYearsDay = new Date(now.getFullYear(), 11, 31);
// console.log(newYearsDay.getDay())

// День текущего месяца


// Определите, какой день недели будет 1 числа текущего месяца.
// let now  = new Date();
// let firstDay = new Date(now.getFullYear(), now.getMonth(), 0);
// console.log(firstDay.getDay())

// День следующего или предыдущего года


// Определите, какой день недели будет 31 декабря следующего года.

// let now = new Date();
// let date = new Date(now.getFullYear()+1, 11, 31);
// console.log(date.getDay())

// Определите, какой день недели будет через год в такую же дату, как сегодня.

// let now = new Date();
// let date = new Date(now.getFullYear()+1, 5, 8);
// console.log(date.getDay())

// Определите, какой день недели был год назад в такую же дату, как сегодня.

// let now = new Date();
// let date = new Date(now.getFullYear()-1, 5, 8);
// console.log(date.getDay())

// День следующего или предыдущего месяца

// Определите, какой день недели был месяц назад в такой же день месяца, как сегодня.

// let now  = new Date();
// let date = new Date(now.getFullYear(), now.getMonth()-1, 8);
// console.log(date.getDay())


// Разность моментов

// Определите, сколько дней между 1 января и 10 сентября текущего года.

// let date1 = new Date(2020, 0, 1, 15, 50);
// let date2 = new Date(2020, 8, 10, 15, 50);
// let result = date2 - date1;
// console.log(result/(1000*60*60*24))

// Определите, сколько дней между 20 числом текущего месяца и 10 числом следующего.

// let date1 = new Date(2020, 5, 10);
// let date2 = new Date(2020, 6, 10);
// console.log((date2-date1)/(1000*60*60*24))


// Момент времени дня

// пределите, сколько часов прошло между вчерашним полднем и текущим моментом времени.

// let now = new Date();
// let yesterday = new Date(now.getFullYear(), now.getMonth(), now.getDate()-1, 12);
// let result = now - yesterday;
// console.log(result/(1000*60*60))

// Начало дня

// Определите, сколько часов прошло между началом дня и текущим моментом времени.

// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate());
// console.log((now- date)/(1000*60*60))

// Конец дня

// Определите, сколько часов осталось до конца дня.

// let now = new Date();
// let midnight = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 24)
// let result = midnight - now;
// console.log(result/(1000*60*60))


// Циклическая проверка

// Рассмотрите промежуток от 2000 года до текущего года. Определите, сколько раз 1 января в этом промежутке попадало на выходной день, то есть на субботу или на воскресенье.

// let now = new Date(2000, 0, 1);
// let recent = new Date();
// let year1 = now.getFullYear();
// let year2 = recent.getFullYear()
// let diff = year2 - year1;
// let count = 0;

// for(let i=0; i<=diff; i++){
//     let date = new Date(year1 + i, 0, i);
//     if(date.getDay()==0 || date.getDay()==6){
//         count++;
//     }
// }
// console.log(count)


// Практика на получение моментов времени

// Определите, сколько секунд прошло с начала дня до настоящего момента времени.

// let now = new Date();
// let date1 = new Date(now.getFullYear(), now.getMonth(), now.getDate()) ;
// let date2 = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours(), now.getMinutes(), now.getSeconds());
// let diff = date2 - date1 ;
// console.log(diff/ 1000 );

// Определите, сколько секунд секунд осталось до конца дня.

// let now = new Date();
// let recent = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours(), now.getMinutes(), now.getSeconds())
// let dayEnd = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 24, 0, 0)
// let diff = dayEnd - recent;
// console.log(diff/1000)

// Определите, сколько дней осталось до нового года.

// let now  = new Date();
// let day = new Date(now.getFullYear(), now.getMonth(), now.getDate());
// let newYearsDay = new Date(now.getFullYear()+1, 0, 1);
// let result = newYearsDay - day;
// console.log(result/(1000*60*60*24))

// Определите, сколько пятниц 13-е в текущем году.

// let now = new Date();
// let count  = 0;


// for(let month = 0; month<=11; month++){
//     let date = new Date(now.getFullYear(),month, 13);
//         if(date.getDay = 5){
//             count++;
//         }
//     }
// console.log(count)

// Определите, какой год был 3 месяца назад.

// let now  = new Date();
// let date = new Date(now.getFullYear(), now.getMonth()-3);
// let year = date.getFullYear();
// console.log(year)

// Определите, какой день недели будет в последнем дне текущего месяца.

// let now = new Date();
// let lastDay = new Date(now.getFullYear(), now.getMonth()+1, 0);
// let result = lastDay.getDay();
// let days = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat']
// console.log(days[result])

// Определите, сколько дней осталось до конца месяца года.

// let now = new Date();
// let monthEnd = new Date(now.getFullYear(), now.getMonth()+1, 0);
// let currentDate = new Date(now.getFullYear(), now.getMonth(), now.getDate())
// let diff = monthEnd - currentDate;
// console.log(diff/(1000*60*60*24))


// Напишите код, который будет определять, високосный ли текущий год.

// let now = new Date();
// let date = new Date(now.getFullYear(), 2, 0);
// let day = date.getDate();
// let year = now.getFullYear();
// if(day == 29){
//     console.log(year + 'год високосный');
// } else{
//     console.log(year + 'год обычный')
// }

// Напишите код, который будет находить предыдущий високосный год.

// let now = new Date();
// let i = 1;
// let day = 0;

// while (day != 29) {

//     let date = new Date(now.getFullYear() - i, 2, 0);
//     day = date.getDate();
//     var year = date.getFullYear();

//     i++;

// }

// console.log(year + ' - год високосный ');

// Напишите код, который будет находить следующий високосный год.

// let now = new Date();
// let i = 1;
// let day = 0;

// while (day != 29) {

//     let date = new Date(now.getFullYear() + i, 2, 0);
//     day = date.getDate();
//     var year = date.getFullYear();

//     i++;

// }

// console.log(year + ' - год високосный ');


// Строковое сравнение дат

// Напишите код, который сравнит две приведенные ниже даты и выведет сообщение о том, какая из них больше:

// let date1 = '2020-11-31';
// let date2 = '2020-12-01';
// if(date2 > date1){
//     console.log('date2 is bigger')
// }else{
//     console.log('date1 is bigger')
// }

// Дата без года

// Напишите код, который сравнит две приведенные ниже даты и выведет сообщение о том, какая из них больше:

// let date1 = '09-21';
// let date2 = '09-23';

// if(date2 > date1){
//     console.log('date2 is bigger')
// }else{
//     console.log('date1 is bigger')
// }

// Дана дата, содержащая месяц и день. Определите знак Зодиака, на которую приходится эта дата.

// let date = '06-20';

// if (date >= '03-21' && date <= '04-20') {
// console.log('Овен');
// }

// if (date >= '04-21' && date <= '05-21') {
// console.log('Телец');
// }

// if (date >= '05-22' && date <= '06-21') {
// console.log('Близнецы');
// }

// if (date >= '06-22' && date <= '07-22') {
// console.log('Рак');
// }

// if (date >= '07-23' && date <= '08-21') {
// console.log('Лев');
// }

// if (date >= '08-22' && date <= '09-23') {
// console.log('Дева');
// }

// if (date >= '09-24' && date <= '10-23') {
// console.log(' Весы');
// }

// if (date >= '10-24' && date <= '11-22') {
// console.log('Скорпион');
// }

// if (date >= '11-23' && date <= '12-22') {
// console.log('Стрелец');
// }

// if (date >= '12-23' && date <= '01-20') {
// console.log('Козерог');
// }

// if (date >= '01-21' && date <= '02-19') {
// console.log('Водолей');
// }

// if (date >= '02-20' && date <= '03-20') {
// console.log('Рыбы');
// }


// Сравнение объектов с датами

// Получите объект с датой, содержащий текущий момент времени. Получите объект с датой, содержащий полдень текущего дня. Сравните два этих объекта и определите, был ли уже полдень или нет.

// let now = new Date();
// let polden = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 12, 0, 0);

// console.log( now > polden);


// Получите объект с датой, содержащий текущий момент времени. Получите объект с датой, содержащий 15 число текущего месяца. Сравните два этих объекта и определите, прошла ли уже половина месяца или нет.

// let now = new Date();
// let midleOfTheMonth = new Date(now.getFullYear(), now.getMonth(), 15);
// console.log( now > midleOfTheMonth)


// Давайте определим, сколько дней осталось до какого-нибудь праздника, например, до ближайшего Женского дня. Проблема здесь в том, что в этом году 8-е марта могло уже быть, а могло еще и не быть.

// let now = new Date();
// let date = new Date(now.getFullYear(), 2, 8); // текущий год
// let result = 0; // сколько дней осталось
// let diff = date - now; // разница

// if (diff > 0) {
// // еще будет
// result = date - now;
// } else if (diff == 0) {
// // сегодня
// result = 0;
// } else {
// // в следующем году
// date = new Date(now.getFullYear() + 1, 2, 8); // следующий год
// result = date - now;
// }

// console.log(result/(1000 * 60 * 60 * 24 ));

// Пусть ваш День Рождения - первое марта. Определите, сколько дней осталось до вашего ближайшего дня рождения.

// let now = new Date();
// let date = new Date(now.getFullYear(), 2, 1);
// let diff = date -now;
// let result = 0;

// if(diff > 0){
//     result = date - now;
//     console.log(result/(1000*60*60*24))
// }else if(diff == 1){
//     console.log("today is your birthday");
// }else {
//     let nextYear = new Date(now.getFullYear()+1, 2, 1);
//     result = nextYear - now;
//     console.log(result/(1000*60*60*24))
// }

// Пусть теперь День Рождения может быть произвольным и содержится в переменных month и day. Определите, сколько дней осталось до заданного этой датой праздника. Учтите при решении, что есть счастливчики, которые родились 29 февраля. Не забудьте их учесть в вашем решении

// let month = '02' // календарная запись (февраль)
// let day = 29; // День Рождения

// let monthDate = Number(month) - 1 // запись для формулы
// let now = new Date();
// let date;
// let result = 0; // сколько дней осталось
// let diff;

// if (monthDate == 1 && day == 29) {
//     var count = 0; //сколько осталось до високосного года лет

//     // определить сколько осталось до високосного года лет
//     var i = 1;
//     let dayVis = 0;

//     while (dayVis != 29) {

//         let date = new Date(now.getFullYear() + i, 2, 0);
//         dayVis = date.getDate();
//         var year = date.getFullYear();

//         i++;

//     }
//     count = i - 1; // осталось до високосного года лет (если 0 - год високосный)

// } else {
//     // не 29 февраля
//     count = 0;
// }

// // формула
// date = new Date(now.getFullYear() + count, monthDate, day);
// diff = date - now; // разница

// if (diff > 0) {
//     // еще будет
//     result = date - now;
// } else if (diff == 0) {
//     // сегодня
//     result = 0;
// } else {
//     // в следующем году
//     date = new Date(now.getFullYear() + count + 1, monthDate, day); // следующий год
//     result = date - now;
// }

// console.log(result / (1000 * 60 * 60 * 24));